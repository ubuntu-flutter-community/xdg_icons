// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// GtkIconTheme FFI bindings
class LibGtk {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LibGtk(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LibGtk.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  gconstpointer g_bytes_get_data(
    ffi.Pointer<GBytes> bytes,
    ffi.Pointer<gsize> size,
  ) {
    return _g_bytes_get_data(
      bytes,
      size,
    );
  }

  late final _g_bytes_get_dataPtr = _lookup<
      ffi.NativeFunction<
          gconstpointer Function(
              ffi.Pointer<GBytes>, ffi.Pointer<gsize>)>>('g_bytes_get_data');
  late final _g_bytes_get_data = _g_bytes_get_dataPtr.asFunction<
      gconstpointer Function(ffi.Pointer<GBytes>, ffi.Pointer<gsize>)>();

  void g_bytes_unref(
    ffi.Pointer<GBytes> bytes,
  ) {
    return _g_bytes_unref(
      bytes,
    );
  }

  late final _g_bytes_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GBytes>)>>(
          'g_bytes_unref');
  late final _g_bytes_unref =
      _g_bytes_unrefPtr.asFunction<void Function(ffi.Pointer<GBytes>)>();

  void g_free(
    gpointer mem,
  ) {
    return _g_free(
      mem,
    );
  }

  late final _g_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gpointer)>>('g_free');
  late final _g_free = _g_freePtr.asFunction<void Function(gpointer)>();

  void g_list_free(
    ffi.Pointer<GList> list,
  ) {
    return _g_list_free(
      list,
    );
  }

  late final _g_list_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GList>)>>(
          'g_list_free');
  late final _g_list_free =
      _g_list_freePtr.asFunction<void Function(ffi.Pointer<GList>)>();

  void g_strfreev(
    ffi.Pointer<ffi.Pointer<gchar>> str_array,
  ) {
    return _g_strfreev(
      str_array,
    );
  }

  late final _g_strfreevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<gchar>>)>>('g_strfreev');
  late final _g_strfreev = _g_strfreevPtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer<gchar>>)>();

  gpointer g_object_ref(
    gpointer object,
  ) {
    return _g_object_ref(
      object,
    );
  }

  late final _g_object_refPtr =
      _lookup<ffi.NativeFunction<gpointer Function(gpointer)>>('g_object_ref');
  late final _g_object_ref =
      _g_object_refPtr.asFunction<gpointer Function(gpointer)>();

  void g_object_unref(
    gpointer object,
  ) {
    return _g_object_unref(
      object,
    );
  }

  late final _g_object_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gpointer)>>(
          'g_object_unref');
  late final _g_object_unref =
      _g_object_unrefPtr.asFunction<void Function(gpointer)>();

  ffi.Pointer<GBytes> g_resources_lookup_data(
    ffi.Pointer<ffi.Char> path,
    int lookup_flags,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_resources_lookup_data(
      path,
      lookup_flags,
      error,
    );
  }

  late final _g_resources_lookup_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GBytes> Function(ffi.Pointer<ffi.Char>, ffi.Int32,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_resources_lookup_data');
  late final _g_resources_lookup_data = _g_resources_lookup_dataPtr.asFunction<
      ffi.Pointer<GBytes> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  int gtk_icon_factory_get_type() {
    return _gtk_icon_factory_get_type();
  }

  late final _gtk_icon_factory_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gtk_icon_factory_get_type');
  late final _gtk_icon_factory_get_type =
      _gtk_icon_factory_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GtkIconFactory> gtk_icon_factory_new() {
    return _gtk_icon_factory_new();
  }

  late final _gtk_icon_factory_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GtkIconFactory> Function()>>(
          'gtk_icon_factory_new');
  late final _gtk_icon_factory_new = _gtk_icon_factory_newPtr
      .asFunction<ffi.Pointer<GtkIconFactory> Function()>();

  void gtk_icon_factory_add(
    ffi.Pointer<GtkIconFactory> factory1,
    ffi.Pointer<gchar> stock_id,
    ffi.Pointer<GtkIconSet> icon_set,
  ) {
    return _gtk_icon_factory_add(
      factory1,
      stock_id,
      icon_set,
    );
  }

  late final _gtk_icon_factory_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GtkIconFactory>, ffi.Pointer<gchar>,
              ffi.Pointer<GtkIconSet>)>>('gtk_icon_factory_add');
  late final _gtk_icon_factory_add = _gtk_icon_factory_addPtr.asFunction<
      void Function(ffi.Pointer<GtkIconFactory>, ffi.Pointer<gchar>,
          ffi.Pointer<GtkIconSet>)>();

  ffi.Pointer<GtkIconSet> gtk_icon_factory_lookup(
    ffi.Pointer<GtkIconFactory> factory1,
    ffi.Pointer<gchar> stock_id,
  ) {
    return _gtk_icon_factory_lookup(
      factory1,
      stock_id,
    );
  }

  late final _gtk_icon_factory_lookupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GtkIconSet> Function(ffi.Pointer<GtkIconFactory>,
              ffi.Pointer<gchar>)>>('gtk_icon_factory_lookup');
  late final _gtk_icon_factory_lookup = _gtk_icon_factory_lookupPtr.asFunction<
      ffi.Pointer<GtkIconSet> Function(
          ffi.Pointer<GtkIconFactory>, ffi.Pointer<gchar>)>();

  void gtk_icon_factory_add_default(
    ffi.Pointer<GtkIconFactory> factory1,
  ) {
    return _gtk_icon_factory_add_default(
      factory1,
    );
  }

  late final _gtk_icon_factory_add_defaultPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GtkIconFactory>)>>(
      'gtk_icon_factory_add_default');
  late final _gtk_icon_factory_add_default = _gtk_icon_factory_add_defaultPtr
      .asFunction<void Function(ffi.Pointer<GtkIconFactory>)>();

  void gtk_icon_factory_remove_default(
    ffi.Pointer<GtkIconFactory> factory1,
  ) {
    return _gtk_icon_factory_remove_default(
      factory1,
    );
  }

  late final _gtk_icon_factory_remove_defaultPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GtkIconFactory>)>>(
      'gtk_icon_factory_remove_default');
  late final _gtk_icon_factory_remove_default =
      _gtk_icon_factory_remove_defaultPtr
          .asFunction<void Function(ffi.Pointer<GtkIconFactory>)>();

  ffi.Pointer<GtkIconSet> gtk_icon_factory_lookup_default(
    ffi.Pointer<gchar> stock_id,
  ) {
    return _gtk_icon_factory_lookup_default(
      stock_id,
    );
  }

  late final _gtk_icon_factory_lookup_defaultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GtkIconSet> Function(
              ffi.Pointer<gchar>)>>('gtk_icon_factory_lookup_default');
  late final _gtk_icon_factory_lookup_default =
      _gtk_icon_factory_lookup_defaultPtr
          .asFunction<ffi.Pointer<GtkIconSet> Function(ffi.Pointer<gchar>)>();

  int gtk_icon_size_lookup(
    int size,
    ffi.Pointer<gint> width,
    ffi.Pointer<gint> height,
  ) {
    return _gtk_icon_size_lookup(
      size,
      width,
      height,
    );
  }

  late final _gtk_icon_size_lookupPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Int32, ffi.Pointer<gint>,
              ffi.Pointer<gint>)>>('gtk_icon_size_lookup');
  late final _gtk_icon_size_lookup = _gtk_icon_size_lookupPtr
      .asFunction<int Function(int, ffi.Pointer<gint>, ffi.Pointer<gint>)>();

  int gtk_icon_size_lookup_for_settings(
    ffi.Pointer<GtkSettings> settings,
    int size,
    ffi.Pointer<gint> width,
    ffi.Pointer<gint> height,
  ) {
    return _gtk_icon_size_lookup_for_settings(
      settings,
      size,
      width,
      height,
    );
  }

  late final _gtk_icon_size_lookup_for_settingsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GtkSettings>,
              ffi.Int32,
              ffi.Pointer<gint>,
              ffi.Pointer<gint>)>>('gtk_icon_size_lookup_for_settings');
  late final _gtk_icon_size_lookup_for_settings =
      _gtk_icon_size_lookup_for_settingsPtr.asFunction<
          int Function(ffi.Pointer<GtkSettings>, int, ffi.Pointer<gint>,
              ffi.Pointer<gint>)>();

  int gtk_icon_size_register(
    ffi.Pointer<gchar> name,
    int width,
    int height,
  ) {
    return _gtk_icon_size_register(
      name,
      width,
      height,
    );
  }

  late final _gtk_icon_size_registerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gchar>, gint, gint)>>('gtk_icon_size_register');
  late final _gtk_icon_size_register = _gtk_icon_size_registerPtr
      .asFunction<int Function(ffi.Pointer<gchar>, int, int)>();

  void gtk_icon_size_register_alias(
    ffi.Pointer<gchar> alias,
    int target,
  ) {
    return _gtk_icon_size_register_alias(
      alias,
      target,
    );
  }

  late final _gtk_icon_size_register_aliasPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gchar>, ffi.Int32)>>(
      'gtk_icon_size_register_alias');
  late final _gtk_icon_size_register_alias = _gtk_icon_size_register_aliasPtr
      .asFunction<void Function(ffi.Pointer<gchar>, int)>();

  int gtk_icon_size_from_name(
    ffi.Pointer<gchar> name,
  ) {
    return _gtk_icon_size_from_name(
      name,
    );
  }

  late final _gtk_icon_size_from_namePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gchar>)>>(
          'gtk_icon_size_from_name');
  late final _gtk_icon_size_from_name = _gtk_icon_size_from_namePtr
      .asFunction<int Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> gtk_icon_size_get_name(
    int size,
  ) {
    return _gtk_icon_size_get_name(
      size,
    );
  }

  late final _gtk_icon_size_get_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Int32)>>(
          'gtk_icon_size_get_name');
  late final _gtk_icon_size_get_name =
      _gtk_icon_size_get_namePtr.asFunction<ffi.Pointer<gchar> Function(int)>();

  int gtk_icon_set_get_type() {
    return _gtk_icon_set_get_type();
  }

  late final _gtk_icon_set_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gtk_icon_set_get_type');
  late final _gtk_icon_set_get_type =
      _gtk_icon_set_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GtkIconSet> gtk_icon_set_new() {
    return _gtk_icon_set_new();
  }

  late final _gtk_icon_set_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GtkIconSet> Function()>>(
          'gtk_icon_set_new');
  late final _gtk_icon_set_new =
      _gtk_icon_set_newPtr.asFunction<ffi.Pointer<GtkIconSet> Function()>();

  ffi.Pointer<GtkIconSet> gtk_icon_set_new_from_pixbuf(
    ffi.Pointer<GdkPixbuf> pixbuf,
  ) {
    return _gtk_icon_set_new_from_pixbuf(
      pixbuf,
    );
  }

  late final _gtk_icon_set_new_from_pixbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GtkIconSet> Function(
              ffi.Pointer<GdkPixbuf>)>>('gtk_icon_set_new_from_pixbuf');
  late final _gtk_icon_set_new_from_pixbuf = _gtk_icon_set_new_from_pixbufPtr
      .asFunction<ffi.Pointer<GtkIconSet> Function(ffi.Pointer<GdkPixbuf>)>();

  ffi.Pointer<GtkIconSet> gtk_icon_set_ref(
    ffi.Pointer<GtkIconSet> icon_set,
  ) {
    return _gtk_icon_set_ref(
      icon_set,
    );
  }

  late final _gtk_icon_set_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GtkIconSet> Function(
              ffi.Pointer<GtkIconSet>)>>('gtk_icon_set_ref');
  late final _gtk_icon_set_ref = _gtk_icon_set_refPtr
      .asFunction<ffi.Pointer<GtkIconSet> Function(ffi.Pointer<GtkIconSet>)>();

  void gtk_icon_set_unref(
    ffi.Pointer<GtkIconSet> icon_set,
  ) {
    return _gtk_icon_set_unref(
      icon_set,
    );
  }

  late final _gtk_icon_set_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GtkIconSet>)>>(
          'gtk_icon_set_unref');
  late final _gtk_icon_set_unref = _gtk_icon_set_unrefPtr
      .asFunction<void Function(ffi.Pointer<GtkIconSet>)>();

  ffi.Pointer<GtkIconSet> gtk_icon_set_copy(
    ffi.Pointer<GtkIconSet> icon_set,
  ) {
    return _gtk_icon_set_copy(
      icon_set,
    );
  }

  late final _gtk_icon_set_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GtkIconSet> Function(
              ffi.Pointer<GtkIconSet>)>>('gtk_icon_set_copy');
  late final _gtk_icon_set_copy = _gtk_icon_set_copyPtr
      .asFunction<ffi.Pointer<GtkIconSet> Function(ffi.Pointer<GtkIconSet>)>();

  ffi.Pointer<GdkPixbuf> gtk_icon_set_render_icon(
    ffi.Pointer<GtkIconSet> icon_set,
    ffi.Pointer<GtkStyle> style,
    int direction,
    int state,
    int size,
    ffi.Pointer<GtkWidget> widget,
    ffi.Pointer<gchar> detail,
  ) {
    return _gtk_icon_set_render_icon(
      icon_set,
      style,
      direction,
      state,
      size,
      widget,
      detail,
    );
  }

  late final _gtk_icon_set_render_iconPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GdkPixbuf> Function(
              ffi.Pointer<GtkIconSet>,
              ffi.Pointer<GtkStyle>,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<GtkWidget>,
              ffi.Pointer<gchar>)>>('gtk_icon_set_render_icon');
  late final _gtk_icon_set_render_icon =
      _gtk_icon_set_render_iconPtr.asFunction<
          ffi.Pointer<GdkPixbuf> Function(
              ffi.Pointer<GtkIconSet>,
              ffi.Pointer<GtkStyle>,
              int,
              int,
              int,
              ffi.Pointer<GtkWidget>,
              ffi.Pointer<gchar>)>();

  void gtk_icon_set_add_source(
    ffi.Pointer<GtkIconSet> icon_set,
    ffi.Pointer<GtkIconSource> source,
  ) {
    return _gtk_icon_set_add_source(
      icon_set,
      source,
    );
  }

  late final _gtk_icon_set_add_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GtkIconSet>,
              ffi.Pointer<GtkIconSource>)>>('gtk_icon_set_add_source');
  late final _gtk_icon_set_add_source = _gtk_icon_set_add_sourcePtr.asFunction<
      void Function(ffi.Pointer<GtkIconSet>, ffi.Pointer<GtkIconSource>)>();

  void gtk_icon_set_get_sizes(
    ffi.Pointer<GtkIconSet> icon_set,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> sizes,
    ffi.Pointer<gint> n_sizes,
  ) {
    return _gtk_icon_set_get_sizes(
      icon_set,
      sizes,
      n_sizes,
    );
  }

  late final _gtk_icon_set_get_sizesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GtkIconSet>,
              ffi.Pointer<ffi.Pointer<ffi.Int32>>,
              ffi.Pointer<gint>)>>('gtk_icon_set_get_sizes');
  late final _gtk_icon_set_get_sizes = _gtk_icon_set_get_sizesPtr.asFunction<
      void Function(ffi.Pointer<GtkIconSet>,
          ffi.Pointer<ffi.Pointer<ffi.Int32>>, ffi.Pointer<gint>)>();

  int gtk_icon_source_get_type() {
    return _gtk_icon_source_get_type();
  }

  late final _gtk_icon_source_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gtk_icon_source_get_type');
  late final _gtk_icon_source_get_type =
      _gtk_icon_source_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GtkIconSource> gtk_icon_source_new() {
    return _gtk_icon_source_new();
  }

  late final _gtk_icon_source_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GtkIconSource> Function()>>(
          'gtk_icon_source_new');
  late final _gtk_icon_source_new = _gtk_icon_source_newPtr
      .asFunction<ffi.Pointer<GtkIconSource> Function()>();

  ffi.Pointer<GtkIconSource> gtk_icon_source_copy(
    ffi.Pointer<GtkIconSource> source,
  ) {
    return _gtk_icon_source_copy(
      source,
    );
  }

  late final _gtk_icon_source_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GtkIconSource> Function(
              ffi.Pointer<GtkIconSource>)>>('gtk_icon_source_copy');
  late final _gtk_icon_source_copy = _gtk_icon_source_copyPtr.asFunction<
      ffi.Pointer<GtkIconSource> Function(ffi.Pointer<GtkIconSource>)>();

  void gtk_icon_source_free(
    ffi.Pointer<GtkIconSource> source,
  ) {
    return _gtk_icon_source_free(
      source,
    );
  }

  late final _gtk_icon_source_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GtkIconSource>)>>(
      'gtk_icon_source_free');
  late final _gtk_icon_source_free = _gtk_icon_source_freePtr
      .asFunction<void Function(ffi.Pointer<GtkIconSource>)>();

  void gtk_icon_source_set_filename(
    ffi.Pointer<GtkIconSource> source,
    ffi.Pointer<gchar> filename,
  ) {
    return _gtk_icon_source_set_filename(
      source,
      filename,
    );
  }

  late final _gtk_icon_source_set_filenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GtkIconSource>,
              ffi.Pointer<gchar>)>>('gtk_icon_source_set_filename');
  late final _gtk_icon_source_set_filename =
      _gtk_icon_source_set_filenamePtr.asFunction<
          void Function(ffi.Pointer<GtkIconSource>, ffi.Pointer<gchar>)>();

  void gtk_icon_source_set_icon_name(
    ffi.Pointer<GtkIconSource> source,
    ffi.Pointer<gchar> icon_name,
  ) {
    return _gtk_icon_source_set_icon_name(
      source,
      icon_name,
    );
  }

  late final _gtk_icon_source_set_icon_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GtkIconSource>,
              ffi.Pointer<gchar>)>>('gtk_icon_source_set_icon_name');
  late final _gtk_icon_source_set_icon_name =
      _gtk_icon_source_set_icon_namePtr.asFunction<
          void Function(ffi.Pointer<GtkIconSource>, ffi.Pointer<gchar>)>();

  void gtk_icon_source_set_pixbuf(
    ffi.Pointer<GtkIconSource> source,
    ffi.Pointer<GdkPixbuf> pixbuf,
  ) {
    return _gtk_icon_source_set_pixbuf(
      source,
      pixbuf,
    );
  }

  late final _gtk_icon_source_set_pixbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GtkIconSource>,
              ffi.Pointer<GdkPixbuf>)>>('gtk_icon_source_set_pixbuf');
  late final _gtk_icon_source_set_pixbuf =
      _gtk_icon_source_set_pixbufPtr.asFunction<
          void Function(ffi.Pointer<GtkIconSource>, ffi.Pointer<GdkPixbuf>)>();

  ffi.Pointer<gchar> gtk_icon_source_get_filename(
    ffi.Pointer<GtkIconSource> source,
  ) {
    return _gtk_icon_source_get_filename(
      source,
    );
  }

  late final _gtk_icon_source_get_filenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GtkIconSource>)>>('gtk_icon_source_get_filename');
  late final _gtk_icon_source_get_filename = _gtk_icon_source_get_filenamePtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GtkIconSource>)>();

  ffi.Pointer<gchar> gtk_icon_source_get_icon_name(
    ffi.Pointer<GtkIconSource> source,
  ) {
    return _gtk_icon_source_get_icon_name(
      source,
    );
  }

  late final _gtk_icon_source_get_icon_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GtkIconSource>)>>('gtk_icon_source_get_icon_name');
  late final _gtk_icon_source_get_icon_name = _gtk_icon_source_get_icon_namePtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GtkIconSource>)>();

  ffi.Pointer<GdkPixbuf> gtk_icon_source_get_pixbuf(
    ffi.Pointer<GtkIconSource> source,
  ) {
    return _gtk_icon_source_get_pixbuf(
      source,
    );
  }

  late final _gtk_icon_source_get_pixbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GdkPixbuf> Function(
              ffi.Pointer<GtkIconSource>)>>('gtk_icon_source_get_pixbuf');
  late final _gtk_icon_source_get_pixbuf =
      _gtk_icon_source_get_pixbufPtr.asFunction<
          ffi.Pointer<GdkPixbuf> Function(ffi.Pointer<GtkIconSource>)>();

  void gtk_icon_source_set_direction_wildcarded(
    ffi.Pointer<GtkIconSource> source,
    int setting,
  ) {
    return _gtk_icon_source_set_direction_wildcarded(
      source,
      setting,
    );
  }

  late final _gtk_icon_source_set_direction_wildcardedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GtkIconSource>,
              gboolean)>>('gtk_icon_source_set_direction_wildcarded');
  late final _gtk_icon_source_set_direction_wildcarded =
      _gtk_icon_source_set_direction_wildcardedPtr
          .asFunction<void Function(ffi.Pointer<GtkIconSource>, int)>();

  void gtk_icon_source_set_state_wildcarded(
    ffi.Pointer<GtkIconSource> source,
    int setting,
  ) {
    return _gtk_icon_source_set_state_wildcarded(
      source,
      setting,
    );
  }

  late final _gtk_icon_source_set_state_wildcardedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GtkIconSource>,
              gboolean)>>('gtk_icon_source_set_state_wildcarded');
  late final _gtk_icon_source_set_state_wildcarded =
      _gtk_icon_source_set_state_wildcardedPtr
          .asFunction<void Function(ffi.Pointer<GtkIconSource>, int)>();

  void gtk_icon_source_set_size_wildcarded(
    ffi.Pointer<GtkIconSource> source,
    int setting,
  ) {
    return _gtk_icon_source_set_size_wildcarded(
      source,
      setting,
    );
  }

  late final _gtk_icon_source_set_size_wildcardedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GtkIconSource>,
              gboolean)>>('gtk_icon_source_set_size_wildcarded');
  late final _gtk_icon_source_set_size_wildcarded =
      _gtk_icon_source_set_size_wildcardedPtr
          .asFunction<void Function(ffi.Pointer<GtkIconSource>, int)>();

  int gtk_icon_source_get_size_wildcarded(
    ffi.Pointer<GtkIconSource> source,
  ) {
    return _gtk_icon_source_get_size_wildcarded(
      source,
    );
  }

  late final _gtk_icon_source_get_size_wildcardedPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GtkIconSource>)>>(
      'gtk_icon_source_get_size_wildcarded');
  late final _gtk_icon_source_get_size_wildcarded =
      _gtk_icon_source_get_size_wildcardedPtr
          .asFunction<int Function(ffi.Pointer<GtkIconSource>)>();

  int gtk_icon_source_get_state_wildcarded(
    ffi.Pointer<GtkIconSource> source,
  ) {
    return _gtk_icon_source_get_state_wildcarded(
      source,
    );
  }

  late final _gtk_icon_source_get_state_wildcardedPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GtkIconSource>)>>(
      'gtk_icon_source_get_state_wildcarded');
  late final _gtk_icon_source_get_state_wildcarded =
      _gtk_icon_source_get_state_wildcardedPtr
          .asFunction<int Function(ffi.Pointer<GtkIconSource>)>();

  int gtk_icon_source_get_direction_wildcarded(
    ffi.Pointer<GtkIconSource> source,
  ) {
    return _gtk_icon_source_get_direction_wildcarded(
      source,
    );
  }

  late final _gtk_icon_source_get_direction_wildcardedPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GtkIconSource>)>>(
      'gtk_icon_source_get_direction_wildcarded');
  late final _gtk_icon_source_get_direction_wildcarded =
      _gtk_icon_source_get_direction_wildcardedPtr
          .asFunction<int Function(ffi.Pointer<GtkIconSource>)>();

  void gtk_icon_source_set_direction(
    ffi.Pointer<GtkIconSource> source,
    int direction,
  ) {
    return _gtk_icon_source_set_direction(
      source,
      direction,
    );
  }

  late final _gtk_icon_source_set_directionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GtkIconSource>,
              ffi.Int32)>>('gtk_icon_source_set_direction');
  late final _gtk_icon_source_set_direction = _gtk_icon_source_set_directionPtr
      .asFunction<void Function(ffi.Pointer<GtkIconSource>, int)>();

  void gtk_icon_source_set_state(
    ffi.Pointer<GtkIconSource> source,
    int state,
  ) {
    return _gtk_icon_source_set_state(
      source,
      state,
    );
  }

  late final _gtk_icon_source_set_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GtkIconSource>,
              ffi.Int32)>>('gtk_icon_source_set_state');
  late final _gtk_icon_source_set_state = _gtk_icon_source_set_statePtr
      .asFunction<void Function(ffi.Pointer<GtkIconSource>, int)>();

  void gtk_icon_source_set_size(
    ffi.Pointer<GtkIconSource> source,
    int size,
  ) {
    return _gtk_icon_source_set_size(
      source,
      size,
    );
  }

  late final _gtk_icon_source_set_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GtkIconSource>,
              ffi.Int32)>>('gtk_icon_source_set_size');
  late final _gtk_icon_source_set_size = _gtk_icon_source_set_sizePtr
      .asFunction<void Function(ffi.Pointer<GtkIconSource>, int)>();

  int gtk_icon_source_get_direction(
    ffi.Pointer<GtkIconSource> source,
  ) {
    return _gtk_icon_source_get_direction(
      source,
    );
  }

  late final _gtk_icon_source_get_directionPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GtkIconSource>)>>(
      'gtk_icon_source_get_direction');
  late final _gtk_icon_source_get_direction = _gtk_icon_source_get_directionPtr
      .asFunction<int Function(ffi.Pointer<GtkIconSource>)>();

  int gtk_icon_source_get_state(
    ffi.Pointer<GtkIconSource> source,
  ) {
    return _gtk_icon_source_get_state(
      source,
    );
  }

  late final _gtk_icon_source_get_statePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GtkIconSource>)>>(
      'gtk_icon_source_get_state');
  late final _gtk_icon_source_get_state = _gtk_icon_source_get_statePtr
      .asFunction<int Function(ffi.Pointer<GtkIconSource>)>();

  int gtk_icon_source_get_size(
    ffi.Pointer<GtkIconSource> source,
  ) {
    return _gtk_icon_source_get_size(
      source,
    );
  }

  late final _gtk_icon_source_get_sizePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GtkIconSource>)>>(
      'gtk_icon_source_get_size');
  late final _gtk_icon_source_get_size = _gtk_icon_source_get_sizePtr
      .asFunction<int Function(ffi.Pointer<GtkIconSource>)>();

  ffi.Pointer<GdkPixbuf> gtk_icon_set_render_icon_pixbuf(
    ffi.Pointer<GtkIconSet> icon_set,
    ffi.Pointer<GtkStyleContext> context,
    int size,
  ) {
    return _gtk_icon_set_render_icon_pixbuf(
      icon_set,
      context,
      size,
    );
  }

  late final _gtk_icon_set_render_icon_pixbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GdkPixbuf> Function(
              ffi.Pointer<GtkIconSet>,
              ffi.Pointer<GtkStyleContext>,
              ffi.Int32)>>('gtk_icon_set_render_icon_pixbuf');
  late final _gtk_icon_set_render_icon_pixbuf =
      _gtk_icon_set_render_icon_pixbufPtr.asFunction<
          ffi.Pointer<GdkPixbuf> Function(
              ffi.Pointer<GtkIconSet>, ffi.Pointer<GtkStyleContext>, int)>();

  ffi.Pointer<cairo_surface_t> gtk_icon_set_render_icon_surface(
    ffi.Pointer<GtkIconSet> icon_set,
    ffi.Pointer<GtkStyleContext> context,
    int size,
    int scale,
    ffi.Pointer<GdkWindow> for_window,
  ) {
    return _gtk_icon_set_render_icon_surface(
      icon_set,
      context,
      size,
      scale,
      for_window,
    );
  }

  late final _gtk_icon_set_render_icon_surfacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_surface_t> Function(
              ffi.Pointer<GtkIconSet>,
              ffi.Pointer<GtkStyleContext>,
              ffi.Int32,
              ffi.Int,
              ffi.Pointer<GdkWindow>)>>('gtk_icon_set_render_icon_surface');
  late final _gtk_icon_set_render_icon_surface =
      _gtk_icon_set_render_icon_surfacePtr.asFunction<
          ffi.Pointer<cairo_surface_t> Function(
              ffi.Pointer<GtkIconSet>,
              ffi.Pointer<GtkStyleContext>,
              int,
              int,
              ffi.Pointer<GdkWindow>)>();

  int gtk_icon_theme_error_quark() {
    return _gtk_icon_theme_error_quark();
  }

  late final _gtk_icon_theme_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>(
          'gtk_icon_theme_error_quark');
  late final _gtk_icon_theme_error_quark =
      _gtk_icon_theme_error_quarkPtr.asFunction<int Function()>();

  int gtk_icon_theme_get_type() {
    return _gtk_icon_theme_get_type();
  }

  late final _gtk_icon_theme_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gtk_icon_theme_get_type');
  late final _gtk_icon_theme_get_type =
      _gtk_icon_theme_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GtkIconTheme> gtk_icon_theme_new() {
    return _gtk_icon_theme_new();
  }

  late final _gtk_icon_theme_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GtkIconTheme> Function()>>(
          'gtk_icon_theme_new');
  late final _gtk_icon_theme_new =
      _gtk_icon_theme_newPtr.asFunction<ffi.Pointer<GtkIconTheme> Function()>();

  ffi.Pointer<GtkIconTheme> gtk_icon_theme_get_default() {
    return _gtk_icon_theme_get_default();
  }

  late final _gtk_icon_theme_get_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GtkIconTheme> Function()>>(
          'gtk_icon_theme_get_default');
  late final _gtk_icon_theme_get_default = _gtk_icon_theme_get_defaultPtr
      .asFunction<ffi.Pointer<GtkIconTheme> Function()>();

  ffi.Pointer<GtkIconTheme> gtk_icon_theme_get_for_screen(
    ffi.Pointer<GdkScreen> screen,
  ) {
    return _gtk_icon_theme_get_for_screen(
      screen,
    );
  }

  late final _gtk_icon_theme_get_for_screenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GtkIconTheme> Function(
              ffi.Pointer<GdkScreen>)>>('gtk_icon_theme_get_for_screen');
  late final _gtk_icon_theme_get_for_screen = _gtk_icon_theme_get_for_screenPtr
      .asFunction<ffi.Pointer<GtkIconTheme> Function(ffi.Pointer<GdkScreen>)>();

  void gtk_icon_theme_set_screen(
    ffi.Pointer<GtkIconTheme> icon_theme,
    ffi.Pointer<GdkScreen> screen,
  ) {
    return _gtk_icon_theme_set_screen(
      icon_theme,
      screen,
    );
  }

  late final _gtk_icon_theme_set_screenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GtkIconTheme>,
              ffi.Pointer<GdkScreen>)>>('gtk_icon_theme_set_screen');
  late final _gtk_icon_theme_set_screen =
      _gtk_icon_theme_set_screenPtr.asFunction<
          void Function(ffi.Pointer<GtkIconTheme>, ffi.Pointer<GdkScreen>)>();

  void gtk_icon_theme_set_search_path(
    ffi.Pointer<GtkIconTheme> icon_theme,
    ffi.Pointer<ffi.Pointer<gchar>> path,
    int n_elements,
  ) {
    return _gtk_icon_theme_set_search_path(
      icon_theme,
      path,
      n_elements,
    );
  }

  late final _gtk_icon_theme_set_search_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GtkIconTheme>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              gint)>>('gtk_icon_theme_set_search_path');
  late final _gtk_icon_theme_set_search_path =
      _gtk_icon_theme_set_search_pathPtr.asFunction<
          void Function(ffi.Pointer<GtkIconTheme>,
              ffi.Pointer<ffi.Pointer<gchar>>, int)>();

  void gtk_icon_theme_get_search_path(
    ffi.Pointer<GtkIconTheme> icon_theme,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<gchar>>> path,
    ffi.Pointer<gint> n_elements,
  ) {
    return _gtk_icon_theme_get_search_path(
      icon_theme,
      path,
      n_elements,
    );
  }

  late final _gtk_icon_theme_get_search_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GtkIconTheme>,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<gchar>>>,
              ffi.Pointer<gint>)>>('gtk_icon_theme_get_search_path');
  late final _gtk_icon_theme_get_search_path =
      _gtk_icon_theme_get_search_pathPtr.asFunction<
          void Function(
              ffi.Pointer<GtkIconTheme>,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<gchar>>>,
              ffi.Pointer<gint>)>();

  void gtk_icon_theme_append_search_path(
    ffi.Pointer<GtkIconTheme> icon_theme,
    ffi.Pointer<gchar> path,
  ) {
    return _gtk_icon_theme_append_search_path(
      icon_theme,
      path,
    );
  }

  late final _gtk_icon_theme_append_search_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GtkIconTheme>,
              ffi.Pointer<gchar>)>>('gtk_icon_theme_append_search_path');
  late final _gtk_icon_theme_append_search_path =
      _gtk_icon_theme_append_search_pathPtr.asFunction<
          void Function(ffi.Pointer<GtkIconTheme>, ffi.Pointer<gchar>)>();

  void gtk_icon_theme_prepend_search_path(
    ffi.Pointer<GtkIconTheme> icon_theme,
    ffi.Pointer<gchar> path,
  ) {
    return _gtk_icon_theme_prepend_search_path(
      icon_theme,
      path,
    );
  }

  late final _gtk_icon_theme_prepend_search_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GtkIconTheme>,
              ffi.Pointer<gchar>)>>('gtk_icon_theme_prepend_search_path');
  late final _gtk_icon_theme_prepend_search_path =
      _gtk_icon_theme_prepend_search_pathPtr.asFunction<
          void Function(ffi.Pointer<GtkIconTheme>, ffi.Pointer<gchar>)>();

  void gtk_icon_theme_add_resource_path(
    ffi.Pointer<GtkIconTheme> icon_theme,
    ffi.Pointer<gchar> path,
  ) {
    return _gtk_icon_theme_add_resource_path(
      icon_theme,
      path,
    );
  }

  late final _gtk_icon_theme_add_resource_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GtkIconTheme>,
              ffi.Pointer<gchar>)>>('gtk_icon_theme_add_resource_path');
  late final _gtk_icon_theme_add_resource_path =
      _gtk_icon_theme_add_resource_pathPtr.asFunction<
          void Function(ffi.Pointer<GtkIconTheme>, ffi.Pointer<gchar>)>();

  void gtk_icon_theme_set_custom_theme(
    ffi.Pointer<GtkIconTheme> icon_theme,
    ffi.Pointer<gchar> theme_name,
  ) {
    return _gtk_icon_theme_set_custom_theme(
      icon_theme,
      theme_name,
    );
  }

  late final _gtk_icon_theme_set_custom_themePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GtkIconTheme>,
              ffi.Pointer<gchar>)>>('gtk_icon_theme_set_custom_theme');
  late final _gtk_icon_theme_set_custom_theme =
      _gtk_icon_theme_set_custom_themePtr.asFunction<
          void Function(ffi.Pointer<GtkIconTheme>, ffi.Pointer<gchar>)>();

  int gtk_icon_theme_has_icon(
    ffi.Pointer<GtkIconTheme> icon_theme,
    ffi.Pointer<gchar> icon_name,
  ) {
    return _gtk_icon_theme_has_icon(
      icon_theme,
      icon_name,
    );
  }

  late final _gtk_icon_theme_has_iconPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GtkIconTheme>,
              ffi.Pointer<gchar>)>>('gtk_icon_theme_has_icon');
  late final _gtk_icon_theme_has_icon = _gtk_icon_theme_has_iconPtr.asFunction<
      int Function(ffi.Pointer<GtkIconTheme>, ffi.Pointer<gchar>)>();

  ffi.Pointer<gint> gtk_icon_theme_get_icon_sizes(
    ffi.Pointer<GtkIconTheme> icon_theme,
    ffi.Pointer<gchar> icon_name,
  ) {
    return _gtk_icon_theme_get_icon_sizes(
      icon_theme,
      icon_name,
    );
  }

  late final _gtk_icon_theme_get_icon_sizesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gint> Function(ffi.Pointer<GtkIconTheme>,
              ffi.Pointer<gchar>)>>('gtk_icon_theme_get_icon_sizes');
  late final _gtk_icon_theme_get_icon_sizes =
      _gtk_icon_theme_get_icon_sizesPtr.asFunction<
          ffi.Pointer<gint> Function(
              ffi.Pointer<GtkIconTheme>, ffi.Pointer<gchar>)>();

  ffi.Pointer<GtkIconInfo> gtk_icon_theme_lookup_icon(
    ffi.Pointer<GtkIconTheme> icon_theme,
    ffi.Pointer<gchar> icon_name,
    int size,
    int flags,
  ) {
    return _gtk_icon_theme_lookup_icon(
      icon_theme,
      icon_name,
      size,
      flags,
    );
  }

  late final _gtk_icon_theme_lookup_iconPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GtkIconInfo> Function(
              ffi.Pointer<GtkIconTheme>,
              ffi.Pointer<gchar>,
              gint,
              ffi.Int32)>>('gtk_icon_theme_lookup_icon');
  late final _gtk_icon_theme_lookup_icon =
      _gtk_icon_theme_lookup_iconPtr.asFunction<
          ffi.Pointer<GtkIconInfo> Function(
              ffi.Pointer<GtkIconTheme>, ffi.Pointer<gchar>, int, int)>();

  ffi.Pointer<GtkIconInfo> gtk_icon_theme_lookup_icon_for_scale(
    ffi.Pointer<GtkIconTheme> icon_theme,
    ffi.Pointer<gchar> icon_name,
    int size,
    int scale,
    int flags,
  ) {
    return _gtk_icon_theme_lookup_icon_for_scale(
      icon_theme,
      icon_name,
      size,
      scale,
      flags,
    );
  }

  late final _gtk_icon_theme_lookup_icon_for_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GtkIconInfo> Function(
              ffi.Pointer<GtkIconTheme>,
              ffi.Pointer<gchar>,
              gint,
              gint,
              ffi.Int32)>>('gtk_icon_theme_lookup_icon_for_scale');
  late final _gtk_icon_theme_lookup_icon_for_scale =
      _gtk_icon_theme_lookup_icon_for_scalePtr.asFunction<
          ffi.Pointer<GtkIconInfo> Function(
              ffi.Pointer<GtkIconTheme>, ffi.Pointer<gchar>, int, int, int)>();

  ffi.Pointer<GtkIconInfo> gtk_icon_theme_choose_icon(
    ffi.Pointer<GtkIconTheme> icon_theme,
    ffi.Pointer<ffi.Pointer<gchar>> icon_names,
    int size,
    int flags,
  ) {
    return _gtk_icon_theme_choose_icon(
      icon_theme,
      icon_names,
      size,
      flags,
    );
  }

  late final _gtk_icon_theme_choose_iconPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GtkIconInfo> Function(
              ffi.Pointer<GtkIconTheme>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              gint,
              ffi.Int32)>>('gtk_icon_theme_choose_icon');
  late final _gtk_icon_theme_choose_icon =
      _gtk_icon_theme_choose_iconPtr.asFunction<
          ffi.Pointer<GtkIconInfo> Function(ffi.Pointer<GtkIconTheme>,
              ffi.Pointer<ffi.Pointer<gchar>>, int, int)>();

  ffi.Pointer<GtkIconInfo> gtk_icon_theme_choose_icon_for_scale(
    ffi.Pointer<GtkIconTheme> icon_theme,
    ffi.Pointer<ffi.Pointer<gchar>> icon_names,
    int size,
    int scale,
    int flags,
  ) {
    return _gtk_icon_theme_choose_icon_for_scale(
      icon_theme,
      icon_names,
      size,
      scale,
      flags,
    );
  }

  late final _gtk_icon_theme_choose_icon_for_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GtkIconInfo> Function(
              ffi.Pointer<GtkIconTheme>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              gint,
              gint,
              ffi.Int32)>>('gtk_icon_theme_choose_icon_for_scale');
  late final _gtk_icon_theme_choose_icon_for_scale =
      _gtk_icon_theme_choose_icon_for_scalePtr.asFunction<
          ffi.Pointer<GtkIconInfo> Function(ffi.Pointer<GtkIconTheme>,
              ffi.Pointer<ffi.Pointer<gchar>>, int, int, int)>();

  ffi.Pointer<GdkPixbuf> gtk_icon_theme_load_icon(
    ffi.Pointer<GtkIconTheme> icon_theme,
    ffi.Pointer<gchar> icon_name,
    int size,
    int flags,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _gtk_icon_theme_load_icon(
      icon_theme,
      icon_name,
      size,
      flags,
      error,
    );
  }

  late final _gtk_icon_theme_load_iconPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GdkPixbuf> Function(
              ffi.Pointer<GtkIconTheme>,
              ffi.Pointer<gchar>,
              gint,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<GError>>)>>('gtk_icon_theme_load_icon');
  late final _gtk_icon_theme_load_icon =
      _gtk_icon_theme_load_iconPtr.asFunction<
          ffi.Pointer<GdkPixbuf> Function(
              ffi.Pointer<GtkIconTheme>,
              ffi.Pointer<gchar>,
              int,
              int,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GdkPixbuf> gtk_icon_theme_load_icon_for_scale(
    ffi.Pointer<GtkIconTheme> icon_theme,
    ffi.Pointer<gchar> icon_name,
    int size,
    int scale,
    int flags,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _gtk_icon_theme_load_icon_for_scale(
      icon_theme,
      icon_name,
      size,
      scale,
      flags,
      error,
    );
  }

  late final _gtk_icon_theme_load_icon_for_scalePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GdkPixbuf> Function(
                  ffi.Pointer<GtkIconTheme>,
                  ffi.Pointer<gchar>,
                  gint,
                  gint,
                  ffi.Int32,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'gtk_icon_theme_load_icon_for_scale');
  late final _gtk_icon_theme_load_icon_for_scale =
      _gtk_icon_theme_load_icon_for_scalePtr.asFunction<
          ffi.Pointer<GdkPixbuf> Function(
              ffi.Pointer<GtkIconTheme>,
              ffi.Pointer<gchar>,
              int,
              int,
              int,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<cairo_surface_t> gtk_icon_theme_load_surface(
    ffi.Pointer<GtkIconTheme> icon_theme,
    ffi.Pointer<gchar> icon_name,
    int size,
    int scale,
    ffi.Pointer<GdkWindow> for_window,
    int flags,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _gtk_icon_theme_load_surface(
      icon_theme,
      icon_name,
      size,
      scale,
      for_window,
      flags,
      error,
    );
  }

  late final _gtk_icon_theme_load_surfacePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<cairo_surface_t> Function(
                  ffi.Pointer<GtkIconTheme>,
                  ffi.Pointer<gchar>,
                  gint,
                  gint,
                  ffi.Pointer<GdkWindow>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'gtk_icon_theme_load_surface');
  late final _gtk_icon_theme_load_surface =
      _gtk_icon_theme_load_surfacePtr.asFunction<
          ffi.Pointer<cairo_surface_t> Function(
              ffi.Pointer<GtkIconTheme>,
              ffi.Pointer<gchar>,
              int,
              int,
              ffi.Pointer<GdkWindow>,
              int,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GtkIconInfo> gtk_icon_theme_lookup_by_gicon(
    ffi.Pointer<GtkIconTheme> icon_theme,
    ffi.Pointer<GIcon> icon,
    int size,
    int flags,
  ) {
    return _gtk_icon_theme_lookup_by_gicon(
      icon_theme,
      icon,
      size,
      flags,
    );
  }

  late final _gtk_icon_theme_lookup_by_giconPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GtkIconInfo> Function(
              ffi.Pointer<GtkIconTheme>,
              ffi.Pointer<GIcon>,
              gint,
              ffi.Int32)>>('gtk_icon_theme_lookup_by_gicon');
  late final _gtk_icon_theme_lookup_by_gicon =
      _gtk_icon_theme_lookup_by_giconPtr.asFunction<
          ffi.Pointer<GtkIconInfo> Function(
              ffi.Pointer<GtkIconTheme>, ffi.Pointer<GIcon>, int, int)>();

  ffi.Pointer<GtkIconInfo> gtk_icon_theme_lookup_by_gicon_for_scale(
    ffi.Pointer<GtkIconTheme> icon_theme,
    ffi.Pointer<GIcon> icon,
    int size,
    int scale,
    int flags,
  ) {
    return _gtk_icon_theme_lookup_by_gicon_for_scale(
      icon_theme,
      icon,
      size,
      scale,
      flags,
    );
  }

  late final _gtk_icon_theme_lookup_by_gicon_for_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GtkIconInfo> Function(
              ffi.Pointer<GtkIconTheme>,
              ffi.Pointer<GIcon>,
              gint,
              gint,
              ffi.Int32)>>('gtk_icon_theme_lookup_by_gicon_for_scale');
  late final _gtk_icon_theme_lookup_by_gicon_for_scale =
      _gtk_icon_theme_lookup_by_gicon_for_scalePtr.asFunction<
          ffi.Pointer<GtkIconInfo> Function(
              ffi.Pointer<GtkIconTheme>, ffi.Pointer<GIcon>, int, int, int)>();

  ffi.Pointer<GList> gtk_icon_theme_list_icons(
    ffi.Pointer<GtkIconTheme> icon_theme,
    ffi.Pointer<gchar> context,
  ) {
    return _gtk_icon_theme_list_icons(
      icon_theme,
      context,
    );
  }

  late final _gtk_icon_theme_list_iconsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GtkIconTheme>,
              ffi.Pointer<gchar>)>>('gtk_icon_theme_list_icons');
  late final _gtk_icon_theme_list_icons =
      _gtk_icon_theme_list_iconsPtr.asFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GtkIconTheme>, ffi.Pointer<gchar>)>();

  ffi.Pointer<GList> gtk_icon_theme_list_contexts(
    ffi.Pointer<GtkIconTheme> icon_theme,
  ) {
    return _gtk_icon_theme_list_contexts(
      icon_theme,
    );
  }

  late final _gtk_icon_theme_list_contextsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GtkIconTheme>)>>('gtk_icon_theme_list_contexts');
  late final _gtk_icon_theme_list_contexts = _gtk_icon_theme_list_contextsPtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GtkIconTheme>)>();

  ffi.Pointer<ffi.Char> gtk_icon_theme_get_example_icon_name(
    ffi.Pointer<GtkIconTheme> icon_theme,
  ) {
    return _gtk_icon_theme_get_example_icon_name(
      icon_theme,
    );
  }

  late final _gtk_icon_theme_get_example_icon_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<GtkIconTheme>)>>(
      'gtk_icon_theme_get_example_icon_name');
  late final _gtk_icon_theme_get_example_icon_name =
      _gtk_icon_theme_get_example_icon_namePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GtkIconTheme>)>();

  int gtk_icon_theme_rescan_if_needed(
    ffi.Pointer<GtkIconTheme> icon_theme,
  ) {
    return _gtk_icon_theme_rescan_if_needed(
      icon_theme,
    );
  }

  late final _gtk_icon_theme_rescan_if_neededPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GtkIconTheme>)>>(
          'gtk_icon_theme_rescan_if_needed');
  late final _gtk_icon_theme_rescan_if_needed =
      _gtk_icon_theme_rescan_if_neededPtr
          .asFunction<int Function(ffi.Pointer<GtkIconTheme>)>();

  void gtk_icon_theme_add_builtin_icon(
    ffi.Pointer<gchar> icon_name,
    int size,
    ffi.Pointer<GdkPixbuf> pixbuf,
  ) {
    return _gtk_icon_theme_add_builtin_icon(
      icon_name,
      size,
      pixbuf,
    );
  }

  late final _gtk_icon_theme_add_builtin_iconPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gchar>, gint,
              ffi.Pointer<GdkPixbuf>)>>('gtk_icon_theme_add_builtin_icon');
  late final _gtk_icon_theme_add_builtin_icon =
      _gtk_icon_theme_add_builtin_iconPtr.asFunction<
          void Function(ffi.Pointer<gchar>, int, ffi.Pointer<GdkPixbuf>)>();

  int gtk_icon_info_get_type() {
    return _gtk_icon_info_get_type();
  }

  late final _gtk_icon_info_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gtk_icon_info_get_type');
  late final _gtk_icon_info_get_type =
      _gtk_icon_info_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GtkIconInfo> gtk_icon_info_copy(
    ffi.Pointer<GtkIconInfo> icon_info,
  ) {
    return _gtk_icon_info_copy(
      icon_info,
    );
  }

  late final _gtk_icon_info_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GtkIconInfo> Function(
              ffi.Pointer<GtkIconInfo>)>>('gtk_icon_info_copy');
  late final _gtk_icon_info_copy = _gtk_icon_info_copyPtr.asFunction<
      ffi.Pointer<GtkIconInfo> Function(ffi.Pointer<GtkIconInfo>)>();

  void gtk_icon_info_free(
    ffi.Pointer<GtkIconInfo> icon_info,
  ) {
    return _gtk_icon_info_free(
      icon_info,
    );
  }

  late final _gtk_icon_info_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GtkIconInfo>)>>(
          'gtk_icon_info_free');
  late final _gtk_icon_info_free = _gtk_icon_info_freePtr
      .asFunction<void Function(ffi.Pointer<GtkIconInfo>)>();

  ffi.Pointer<GtkIconInfo> gtk_icon_info_new_for_pixbuf(
    ffi.Pointer<GtkIconTheme> icon_theme,
    ffi.Pointer<GdkPixbuf> pixbuf,
  ) {
    return _gtk_icon_info_new_for_pixbuf(
      icon_theme,
      pixbuf,
    );
  }

  late final _gtk_icon_info_new_for_pixbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GtkIconInfo> Function(ffi.Pointer<GtkIconTheme>,
              ffi.Pointer<GdkPixbuf>)>>('gtk_icon_info_new_for_pixbuf');
  late final _gtk_icon_info_new_for_pixbuf =
      _gtk_icon_info_new_for_pixbufPtr.asFunction<
          ffi.Pointer<GtkIconInfo> Function(
              ffi.Pointer<GtkIconTheme>, ffi.Pointer<GdkPixbuf>)>();

  int gtk_icon_info_get_base_size(
    ffi.Pointer<GtkIconInfo> icon_info,
  ) {
    return _gtk_icon_info_get_base_size(
      icon_info,
    );
  }

  late final _gtk_icon_info_get_base_sizePtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GtkIconInfo>)>>(
          'gtk_icon_info_get_base_size');
  late final _gtk_icon_info_get_base_size = _gtk_icon_info_get_base_sizePtr
      .asFunction<int Function(ffi.Pointer<GtkIconInfo>)>();

  int gtk_icon_info_get_base_scale(
    ffi.Pointer<GtkIconInfo> icon_info,
  ) {
    return _gtk_icon_info_get_base_scale(
      icon_info,
    );
  }

  late final _gtk_icon_info_get_base_scalePtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GtkIconInfo>)>>(
          'gtk_icon_info_get_base_scale');
  late final _gtk_icon_info_get_base_scale = _gtk_icon_info_get_base_scalePtr
      .asFunction<int Function(ffi.Pointer<GtkIconInfo>)>();

  ffi.Pointer<gchar> gtk_icon_info_get_filename(
    ffi.Pointer<GtkIconInfo> icon_info,
  ) {
    return _gtk_icon_info_get_filename(
      icon_info,
    );
  }

  late final _gtk_icon_info_get_filenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GtkIconInfo>)>>('gtk_icon_info_get_filename');
  late final _gtk_icon_info_get_filename = _gtk_icon_info_get_filenamePtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GtkIconInfo>)>();

  ffi.Pointer<GdkPixbuf> gtk_icon_info_get_builtin_pixbuf(
    ffi.Pointer<GtkIconInfo> icon_info,
  ) {
    return _gtk_icon_info_get_builtin_pixbuf(
      icon_info,
    );
  }

  late final _gtk_icon_info_get_builtin_pixbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GdkPixbuf> Function(
              ffi.Pointer<GtkIconInfo>)>>('gtk_icon_info_get_builtin_pixbuf');
  late final _gtk_icon_info_get_builtin_pixbuf =
      _gtk_icon_info_get_builtin_pixbufPtr.asFunction<
          ffi.Pointer<GdkPixbuf> Function(ffi.Pointer<GtkIconInfo>)>();

  int gtk_icon_info_is_symbolic(
    ffi.Pointer<GtkIconInfo> icon_info,
  ) {
    return _gtk_icon_info_is_symbolic(
      icon_info,
    );
  }

  late final _gtk_icon_info_is_symbolicPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GtkIconInfo>)>>(
          'gtk_icon_info_is_symbolic');
  late final _gtk_icon_info_is_symbolic = _gtk_icon_info_is_symbolicPtr
      .asFunction<int Function(ffi.Pointer<GtkIconInfo>)>();

  ffi.Pointer<GdkPixbuf> gtk_icon_info_load_icon(
    ffi.Pointer<GtkIconInfo> icon_info,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _gtk_icon_info_load_icon(
      icon_info,
      error,
    );
  }

  late final _gtk_icon_info_load_iconPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GdkPixbuf> Function(ffi.Pointer<GtkIconInfo>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('gtk_icon_info_load_icon');
  late final _gtk_icon_info_load_icon = _gtk_icon_info_load_iconPtr.asFunction<
      ffi.Pointer<GdkPixbuf> Function(
          ffi.Pointer<GtkIconInfo>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<cairo_surface_t> gtk_icon_info_load_surface(
    ffi.Pointer<GtkIconInfo> icon_info,
    ffi.Pointer<GdkWindow> for_window,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _gtk_icon_info_load_surface(
      icon_info,
      for_window,
      error,
    );
  }

  late final _gtk_icon_info_load_surfacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_surface_t> Function(
              ffi.Pointer<GtkIconInfo>,
              ffi.Pointer<GdkWindow>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('gtk_icon_info_load_surface');
  late final _gtk_icon_info_load_surface =
      _gtk_icon_info_load_surfacePtr.asFunction<
          ffi.Pointer<cairo_surface_t> Function(ffi.Pointer<GtkIconInfo>,
              ffi.Pointer<GdkWindow>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void gtk_icon_info_load_icon_async(
    ffi.Pointer<GtkIconInfo> icon_info,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _gtk_icon_info_load_icon_async(
      icon_info,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _gtk_icon_info_load_icon_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GtkIconInfo>, ffi.Pointer<GCancellable>,
              GAsyncReadyCallback, gpointer)>>('gtk_icon_info_load_icon_async');
  late final _gtk_icon_info_load_icon_async =
      _gtk_icon_info_load_icon_asyncPtr.asFunction<
          void Function(ffi.Pointer<GtkIconInfo>, ffi.Pointer<GCancellable>,
              GAsyncReadyCallback, gpointer)>();

  ffi.Pointer<GdkPixbuf> gtk_icon_info_load_icon_finish(
    ffi.Pointer<GtkIconInfo> icon_info,
    ffi.Pointer<GAsyncResult> res,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _gtk_icon_info_load_icon_finish(
      icon_info,
      res,
      error,
    );
  }

  late final _gtk_icon_info_load_icon_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GdkPixbuf> Function(
                  ffi.Pointer<GtkIconInfo>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'gtk_icon_info_load_icon_finish');
  late final _gtk_icon_info_load_icon_finish =
      _gtk_icon_info_load_icon_finishPtr.asFunction<
          ffi.Pointer<GdkPixbuf> Function(ffi.Pointer<GtkIconInfo>,
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GdkPixbuf> gtk_icon_info_load_symbolic(
    ffi.Pointer<GtkIconInfo> icon_info,
    ffi.Pointer<GdkRGBA> fg,
    ffi.Pointer<GdkRGBA> success_color,
    ffi.Pointer<GdkRGBA> warning_color,
    ffi.Pointer<GdkRGBA> error_color,
    ffi.Pointer<gboolean> was_symbolic,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _gtk_icon_info_load_symbolic(
      icon_info,
      fg,
      success_color,
      warning_color,
      error_color,
      was_symbolic,
      error,
    );
  }

  late final _gtk_icon_info_load_symbolicPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GdkPixbuf> Function(
                  ffi.Pointer<GtkIconInfo>,
                  ffi.Pointer<GdkRGBA>,
                  ffi.Pointer<GdkRGBA>,
                  ffi.Pointer<GdkRGBA>,
                  ffi.Pointer<GdkRGBA>,
                  ffi.Pointer<gboolean>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'gtk_icon_info_load_symbolic');
  late final _gtk_icon_info_load_symbolic =
      _gtk_icon_info_load_symbolicPtr.asFunction<
          ffi.Pointer<GdkPixbuf> Function(
              ffi.Pointer<GtkIconInfo>,
              ffi.Pointer<GdkRGBA>,
              ffi.Pointer<GdkRGBA>,
              ffi.Pointer<GdkRGBA>,
              ffi.Pointer<GdkRGBA>,
              ffi.Pointer<gboolean>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void gtk_icon_info_load_symbolic_async(
    ffi.Pointer<GtkIconInfo> icon_info,
    ffi.Pointer<GdkRGBA> fg,
    ffi.Pointer<GdkRGBA> success_color,
    ffi.Pointer<GdkRGBA> warning_color,
    ffi.Pointer<GdkRGBA> error_color,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _gtk_icon_info_load_symbolic_async(
      icon_info,
      fg,
      success_color,
      warning_color,
      error_color,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _gtk_icon_info_load_symbolic_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GtkIconInfo>,
              ffi.Pointer<GdkRGBA>,
              ffi.Pointer<GdkRGBA>,
              ffi.Pointer<GdkRGBA>,
              ffi.Pointer<GdkRGBA>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('gtk_icon_info_load_symbolic_async');
  late final _gtk_icon_info_load_symbolic_async =
      _gtk_icon_info_load_symbolic_asyncPtr.asFunction<
          void Function(
              ffi.Pointer<GtkIconInfo>,
              ffi.Pointer<GdkRGBA>,
              ffi.Pointer<GdkRGBA>,
              ffi.Pointer<GdkRGBA>,
              ffi.Pointer<GdkRGBA>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>();

  ffi.Pointer<GdkPixbuf> gtk_icon_info_load_symbolic_finish(
    ffi.Pointer<GtkIconInfo> icon_info,
    ffi.Pointer<GAsyncResult> res,
    ffi.Pointer<gboolean> was_symbolic,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _gtk_icon_info_load_symbolic_finish(
      icon_info,
      res,
      was_symbolic,
      error,
    );
  }

  late final _gtk_icon_info_load_symbolic_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GdkPixbuf> Function(
                  ffi.Pointer<GtkIconInfo>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<gboolean>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'gtk_icon_info_load_symbolic_finish');
  late final _gtk_icon_info_load_symbolic_finish =
      _gtk_icon_info_load_symbolic_finishPtr.asFunction<
          ffi.Pointer<GdkPixbuf> Function(
              ffi.Pointer<GtkIconInfo>,
              ffi.Pointer<GAsyncResult>,
              ffi.Pointer<gboolean>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GdkPixbuf> gtk_icon_info_load_symbolic_for_context(
    ffi.Pointer<GtkIconInfo> icon_info,
    ffi.Pointer<GtkStyleContext> context,
    ffi.Pointer<gboolean> was_symbolic,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _gtk_icon_info_load_symbolic_for_context(
      icon_info,
      context,
      was_symbolic,
      error,
    );
  }

  late final _gtk_icon_info_load_symbolic_for_contextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GdkPixbuf> Function(
                  ffi.Pointer<GtkIconInfo>,
                  ffi.Pointer<GtkStyleContext>,
                  ffi.Pointer<gboolean>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'gtk_icon_info_load_symbolic_for_context');
  late final _gtk_icon_info_load_symbolic_for_context =
      _gtk_icon_info_load_symbolic_for_contextPtr.asFunction<
          ffi.Pointer<GdkPixbuf> Function(
              ffi.Pointer<GtkIconInfo>,
              ffi.Pointer<GtkStyleContext>,
              ffi.Pointer<gboolean>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void gtk_icon_info_load_symbolic_for_context_async(
    ffi.Pointer<GtkIconInfo> icon_info,
    ffi.Pointer<GtkStyleContext> context,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _gtk_icon_info_load_symbolic_for_context_async(
      icon_info,
      context,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _gtk_icon_info_load_symbolic_for_context_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GtkIconInfo>,
              ffi.Pointer<GtkStyleContext>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('gtk_icon_info_load_symbolic_for_context_async');
  late final _gtk_icon_info_load_symbolic_for_context_async =
      _gtk_icon_info_load_symbolic_for_context_asyncPtr.asFunction<
          void Function(ffi.Pointer<GtkIconInfo>, ffi.Pointer<GtkStyleContext>,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  ffi.Pointer<GdkPixbuf> gtk_icon_info_load_symbolic_for_context_finish(
    ffi.Pointer<GtkIconInfo> icon_info,
    ffi.Pointer<GAsyncResult> res,
    ffi.Pointer<gboolean> was_symbolic,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _gtk_icon_info_load_symbolic_for_context_finish(
      icon_info,
      res,
      was_symbolic,
      error,
    );
  }

  late final _gtk_icon_info_load_symbolic_for_context_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GdkPixbuf> Function(
                  ffi.Pointer<GtkIconInfo>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<gboolean>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'gtk_icon_info_load_symbolic_for_context_finish');
  late final _gtk_icon_info_load_symbolic_for_context_finish =
      _gtk_icon_info_load_symbolic_for_context_finishPtr.asFunction<
          ffi.Pointer<GdkPixbuf> Function(
              ffi.Pointer<GtkIconInfo>,
              ffi.Pointer<GAsyncResult>,
              ffi.Pointer<gboolean>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GdkPixbuf> gtk_icon_info_load_symbolic_for_style(
    ffi.Pointer<GtkIconInfo> icon_info,
    ffi.Pointer<GtkStyle> style,
    int state,
    ffi.Pointer<gboolean> was_symbolic,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _gtk_icon_info_load_symbolic_for_style(
      icon_info,
      style,
      state,
      was_symbolic,
      error,
    );
  }

  late final _gtk_icon_info_load_symbolic_for_stylePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GdkPixbuf> Function(
                  ffi.Pointer<GtkIconInfo>,
                  ffi.Pointer<GtkStyle>,
                  ffi.Int32,
                  ffi.Pointer<gboolean>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'gtk_icon_info_load_symbolic_for_style');
  late final _gtk_icon_info_load_symbolic_for_style =
      _gtk_icon_info_load_symbolic_for_stylePtr.asFunction<
          ffi.Pointer<GdkPixbuf> Function(
              ffi.Pointer<GtkIconInfo>,
              ffi.Pointer<GtkStyle>,
              int,
              ffi.Pointer<gboolean>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void gtk_icon_info_set_raw_coordinates(
    ffi.Pointer<GtkIconInfo> icon_info,
    int raw_coordinates,
  ) {
    return _gtk_icon_info_set_raw_coordinates(
      icon_info,
      raw_coordinates,
    );
  }

  late final _gtk_icon_info_set_raw_coordinatesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GtkIconInfo>,
              gboolean)>>('gtk_icon_info_set_raw_coordinates');
  late final _gtk_icon_info_set_raw_coordinates =
      _gtk_icon_info_set_raw_coordinatesPtr
          .asFunction<void Function(ffi.Pointer<GtkIconInfo>, int)>();

  int gtk_icon_info_get_embedded_rect(
    ffi.Pointer<GtkIconInfo> icon_info,
    ffi.Pointer<GdkRectangle> rectangle,
  ) {
    return _gtk_icon_info_get_embedded_rect(
      icon_info,
      rectangle,
    );
  }

  late final _gtk_icon_info_get_embedded_rectPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GtkIconInfo>,
              ffi.Pointer<GdkRectangle>)>>('gtk_icon_info_get_embedded_rect');
  late final _gtk_icon_info_get_embedded_rect =
      _gtk_icon_info_get_embedded_rectPtr.asFunction<
          int Function(ffi.Pointer<GtkIconInfo>, ffi.Pointer<GdkRectangle>)>();

  int gtk_icon_info_get_attach_points(
    ffi.Pointer<GtkIconInfo> icon_info,
    ffi.Pointer<ffi.Pointer<GdkPoint>> points,
    ffi.Pointer<gint> n_points,
  ) {
    return _gtk_icon_info_get_attach_points(
      icon_info,
      points,
      n_points,
    );
  }

  late final _gtk_icon_info_get_attach_pointsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GtkIconInfo>,
              ffi.Pointer<ffi.Pointer<GdkPoint>>,
              ffi.Pointer<gint>)>>('gtk_icon_info_get_attach_points');
  late final _gtk_icon_info_get_attach_points =
      _gtk_icon_info_get_attach_pointsPtr.asFunction<
          int Function(ffi.Pointer<GtkIconInfo>,
              ffi.Pointer<ffi.Pointer<GdkPoint>>, ffi.Pointer<gint>)>();

  ffi.Pointer<gchar> gtk_icon_info_get_display_name(
    ffi.Pointer<GtkIconInfo> icon_info,
  ) {
    return _gtk_icon_info_get_display_name(
      icon_info,
    );
  }

  late final _gtk_icon_info_get_display_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GtkIconInfo>)>>('gtk_icon_info_get_display_name');
  late final _gtk_icon_info_get_display_name =
      _gtk_icon_info_get_display_namePtr
          .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GtkIconInfo>)>();

  int gtk_icon_view_get_type() {
    return _gtk_icon_view_get_type();
  }

  late final _gtk_icon_view_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gtk_icon_view_get_type');
  late final _gtk_icon_view_get_type =
      _gtk_icon_view_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GtkWidget> gtk_icon_view_new() {
    return _gtk_icon_view_new();
  }

  late final _gtk_icon_view_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GtkWidget> Function()>>(
          'gtk_icon_view_new');
  late final _gtk_icon_view_new =
      _gtk_icon_view_newPtr.asFunction<ffi.Pointer<GtkWidget> Function()>();

  ffi.Pointer<GtkWidget> gtk_icon_view_new_with_area(
    ffi.Pointer<GtkCellArea> area,
  ) {
    return _gtk_icon_view_new_with_area(
      area,
    );
  }

  late final _gtk_icon_view_new_with_areaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GtkWidget> Function(
              ffi.Pointer<GtkCellArea>)>>('gtk_icon_view_new_with_area');
  late final _gtk_icon_view_new_with_area = _gtk_icon_view_new_with_areaPtr
      .asFunction<ffi.Pointer<GtkWidget> Function(ffi.Pointer<GtkCellArea>)>();

  ffi.Pointer<GtkWidget> gtk_icon_view_new_with_model(
    ffi.Pointer<GtkTreeModel> model,
  ) {
    return _gtk_icon_view_new_with_model(
      model,
    );
  }

  late final _gtk_icon_view_new_with_modelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GtkWidget> Function(
              ffi.Pointer<GtkTreeModel>)>>('gtk_icon_view_new_with_model');
  late final _gtk_icon_view_new_with_model = _gtk_icon_view_new_with_modelPtr
      .asFunction<ffi.Pointer<GtkWidget> Function(ffi.Pointer<GtkTreeModel>)>();

  void gtk_icon_view_set_model(
    ffi.Pointer<GtkIconView> icon_view,
    ffi.Pointer<GtkTreeModel> model,
  ) {
    return _gtk_icon_view_set_model(
      icon_view,
      model,
    );
  }

  late final _gtk_icon_view_set_modelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GtkIconView>,
              ffi.Pointer<GtkTreeModel>)>>('gtk_icon_view_set_model');
  late final _gtk_icon_view_set_model = _gtk_icon_view_set_modelPtr.asFunction<
      void Function(ffi.Pointer<GtkIconView>, ffi.Pointer<GtkTreeModel>)>();

  ffi.Pointer<GtkTreeModel> gtk_icon_view_get_model(
    ffi.Pointer<GtkIconView> icon_view,
  ) {
    return _gtk_icon_view_get_model(
      icon_view,
    );
  }

  late final _gtk_icon_view_get_modelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GtkTreeModel> Function(
              ffi.Pointer<GtkIconView>)>>('gtk_icon_view_get_model');
  late final _gtk_icon_view_get_model = _gtk_icon_view_get_modelPtr.asFunction<
      ffi.Pointer<GtkTreeModel> Function(ffi.Pointer<GtkIconView>)>();

  void gtk_icon_view_set_text_column(
    ffi.Pointer<GtkIconView> icon_view,
    int column,
  ) {
    return _gtk_icon_view_set_text_column(
      icon_view,
      column,
    );
  }

  late final _gtk_icon_view_set_text_columnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GtkIconView>,
              gint)>>('gtk_icon_view_set_text_column');
  late final _gtk_icon_view_set_text_column = _gtk_icon_view_set_text_columnPtr
      .asFunction<void Function(ffi.Pointer<GtkIconView>, int)>();

  int gtk_icon_view_get_text_column(
    ffi.Pointer<GtkIconView> icon_view,
  ) {
    return _gtk_icon_view_get_text_column(
      icon_view,
    );
  }

  late final _gtk_icon_view_get_text_columnPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GtkIconView>)>>(
          'gtk_icon_view_get_text_column');
  late final _gtk_icon_view_get_text_column = _gtk_icon_view_get_text_columnPtr
      .asFunction<int Function(ffi.Pointer<GtkIconView>)>();

  void gtk_icon_view_set_markup_column(
    ffi.Pointer<GtkIconView> icon_view,
    int column,
  ) {
    return _gtk_icon_view_set_markup_column(
      icon_view,
      column,
    );
  }

  late final _gtk_icon_view_set_markup_columnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GtkIconView>,
              gint)>>('gtk_icon_view_set_markup_column');
  late final _gtk_icon_view_set_markup_column =
      _gtk_icon_view_set_markup_columnPtr
          .asFunction<void Function(ffi.Pointer<GtkIconView>, int)>();

  int gtk_icon_view_get_markup_column(
    ffi.Pointer<GtkIconView> icon_view,
  ) {
    return _gtk_icon_view_get_markup_column(
      icon_view,
    );
  }

  late final _gtk_icon_view_get_markup_columnPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GtkIconView>)>>(
          'gtk_icon_view_get_markup_column');
  late final _gtk_icon_view_get_markup_column =
      _gtk_icon_view_get_markup_columnPtr
          .asFunction<int Function(ffi.Pointer<GtkIconView>)>();

  void gtk_icon_view_set_pixbuf_column(
    ffi.Pointer<GtkIconView> icon_view,
    int column,
  ) {
    return _gtk_icon_view_set_pixbuf_column(
      icon_view,
      column,
    );
  }

  late final _gtk_icon_view_set_pixbuf_columnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GtkIconView>,
              gint)>>('gtk_icon_view_set_pixbuf_column');
  late final _gtk_icon_view_set_pixbuf_column =
      _gtk_icon_view_set_pixbuf_columnPtr
          .asFunction<void Function(ffi.Pointer<GtkIconView>, int)>();

  int gtk_icon_view_get_pixbuf_column(
    ffi.Pointer<GtkIconView> icon_view,
  ) {
    return _gtk_icon_view_get_pixbuf_column(
      icon_view,
    );
  }

  late final _gtk_icon_view_get_pixbuf_columnPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GtkIconView>)>>(
          'gtk_icon_view_get_pixbuf_column');
  late final _gtk_icon_view_get_pixbuf_column =
      _gtk_icon_view_get_pixbuf_columnPtr
          .asFunction<int Function(ffi.Pointer<GtkIconView>)>();

  void gtk_icon_view_set_item_orientation(
    ffi.Pointer<GtkIconView> icon_view,
    int orientation,
  ) {
    return _gtk_icon_view_set_item_orientation(
      icon_view,
      orientation,
    );
  }

  late final _gtk_icon_view_set_item_orientationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GtkIconView>,
              ffi.Int32)>>('gtk_icon_view_set_item_orientation');
  late final _gtk_icon_view_set_item_orientation =
      _gtk_icon_view_set_item_orientationPtr
          .asFunction<void Function(ffi.Pointer<GtkIconView>, int)>();

  int gtk_icon_view_get_item_orientation(
    ffi.Pointer<GtkIconView> icon_view,
  ) {
    return _gtk_icon_view_get_item_orientation(
      icon_view,
    );
  }

  late final _gtk_icon_view_get_item_orientationPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GtkIconView>)>>(
          'gtk_icon_view_get_item_orientation');
  late final _gtk_icon_view_get_item_orientation =
      _gtk_icon_view_get_item_orientationPtr
          .asFunction<int Function(ffi.Pointer<GtkIconView>)>();

  void gtk_icon_view_set_columns(
    ffi.Pointer<GtkIconView> icon_view,
    int columns,
  ) {
    return _gtk_icon_view_set_columns(
      icon_view,
      columns,
    );
  }

  late final _gtk_icon_view_set_columnsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GtkIconView>, gint)>>('gtk_icon_view_set_columns');
  late final _gtk_icon_view_set_columns = _gtk_icon_view_set_columnsPtr
      .asFunction<void Function(ffi.Pointer<GtkIconView>, int)>();

  int gtk_icon_view_get_columns(
    ffi.Pointer<GtkIconView> icon_view,
  ) {
    return _gtk_icon_view_get_columns(
      icon_view,
    );
  }

  late final _gtk_icon_view_get_columnsPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GtkIconView>)>>(
          'gtk_icon_view_get_columns');
  late final _gtk_icon_view_get_columns = _gtk_icon_view_get_columnsPtr
      .asFunction<int Function(ffi.Pointer<GtkIconView>)>();

  void gtk_icon_view_set_item_width(
    ffi.Pointer<GtkIconView> icon_view,
    int item_width,
  ) {
    return _gtk_icon_view_set_item_width(
      icon_view,
      item_width,
    );
  }

  late final _gtk_icon_view_set_item_widthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GtkIconView>, gint)>>('gtk_icon_view_set_item_width');
  late final _gtk_icon_view_set_item_width = _gtk_icon_view_set_item_widthPtr
      .asFunction<void Function(ffi.Pointer<GtkIconView>, int)>();

  int gtk_icon_view_get_item_width(
    ffi.Pointer<GtkIconView> icon_view,
  ) {
    return _gtk_icon_view_get_item_width(
      icon_view,
    );
  }

  late final _gtk_icon_view_get_item_widthPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GtkIconView>)>>(
          'gtk_icon_view_get_item_width');
  late final _gtk_icon_view_get_item_width = _gtk_icon_view_get_item_widthPtr
      .asFunction<int Function(ffi.Pointer<GtkIconView>)>();

  void gtk_icon_view_set_spacing(
    ffi.Pointer<GtkIconView> icon_view,
    int spacing,
  ) {
    return _gtk_icon_view_set_spacing(
      icon_view,
      spacing,
    );
  }

  late final _gtk_icon_view_set_spacingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GtkIconView>, gint)>>('gtk_icon_view_set_spacing');
  late final _gtk_icon_view_set_spacing = _gtk_icon_view_set_spacingPtr
      .asFunction<void Function(ffi.Pointer<GtkIconView>, int)>();

  int gtk_icon_view_get_spacing(
    ffi.Pointer<GtkIconView> icon_view,
  ) {
    return _gtk_icon_view_get_spacing(
      icon_view,
    );
  }

  late final _gtk_icon_view_get_spacingPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GtkIconView>)>>(
          'gtk_icon_view_get_spacing');
  late final _gtk_icon_view_get_spacing = _gtk_icon_view_get_spacingPtr
      .asFunction<int Function(ffi.Pointer<GtkIconView>)>();

  void gtk_icon_view_set_row_spacing(
    ffi.Pointer<GtkIconView> icon_view,
    int row_spacing,
  ) {
    return _gtk_icon_view_set_row_spacing(
      icon_view,
      row_spacing,
    );
  }

  late final _gtk_icon_view_set_row_spacingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GtkIconView>,
              gint)>>('gtk_icon_view_set_row_spacing');
  late final _gtk_icon_view_set_row_spacing = _gtk_icon_view_set_row_spacingPtr
      .asFunction<void Function(ffi.Pointer<GtkIconView>, int)>();

  int gtk_icon_view_get_row_spacing(
    ffi.Pointer<GtkIconView> icon_view,
  ) {
    return _gtk_icon_view_get_row_spacing(
      icon_view,
    );
  }

  late final _gtk_icon_view_get_row_spacingPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GtkIconView>)>>(
          'gtk_icon_view_get_row_spacing');
  late final _gtk_icon_view_get_row_spacing = _gtk_icon_view_get_row_spacingPtr
      .asFunction<int Function(ffi.Pointer<GtkIconView>)>();

  void gtk_icon_view_set_column_spacing(
    ffi.Pointer<GtkIconView> icon_view,
    int column_spacing,
  ) {
    return _gtk_icon_view_set_column_spacing(
      icon_view,
      column_spacing,
    );
  }

  late final _gtk_icon_view_set_column_spacingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GtkIconView>,
              gint)>>('gtk_icon_view_set_column_spacing');
  late final _gtk_icon_view_set_column_spacing =
      _gtk_icon_view_set_column_spacingPtr
          .asFunction<void Function(ffi.Pointer<GtkIconView>, int)>();

  int gtk_icon_view_get_column_spacing(
    ffi.Pointer<GtkIconView> icon_view,
  ) {
    return _gtk_icon_view_get_column_spacing(
      icon_view,
    );
  }

  late final _gtk_icon_view_get_column_spacingPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GtkIconView>)>>(
          'gtk_icon_view_get_column_spacing');
  late final _gtk_icon_view_get_column_spacing =
      _gtk_icon_view_get_column_spacingPtr
          .asFunction<int Function(ffi.Pointer<GtkIconView>)>();

  void gtk_icon_view_set_margin(
    ffi.Pointer<GtkIconView> icon_view,
    int margin,
  ) {
    return _gtk_icon_view_set_margin(
      icon_view,
      margin,
    );
  }

  late final _gtk_icon_view_set_marginPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GtkIconView>, gint)>>('gtk_icon_view_set_margin');
  late final _gtk_icon_view_set_margin = _gtk_icon_view_set_marginPtr
      .asFunction<void Function(ffi.Pointer<GtkIconView>, int)>();

  int gtk_icon_view_get_margin(
    ffi.Pointer<GtkIconView> icon_view,
  ) {
    return _gtk_icon_view_get_margin(
      icon_view,
    );
  }

  late final _gtk_icon_view_get_marginPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GtkIconView>)>>(
          'gtk_icon_view_get_margin');
  late final _gtk_icon_view_get_margin = _gtk_icon_view_get_marginPtr
      .asFunction<int Function(ffi.Pointer<GtkIconView>)>();

  void gtk_icon_view_set_item_padding(
    ffi.Pointer<GtkIconView> icon_view,
    int item_padding,
  ) {
    return _gtk_icon_view_set_item_padding(
      icon_view,
      item_padding,
    );
  }

  late final _gtk_icon_view_set_item_paddingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GtkIconView>,
              gint)>>('gtk_icon_view_set_item_padding');
  late final _gtk_icon_view_set_item_padding =
      _gtk_icon_view_set_item_paddingPtr
          .asFunction<void Function(ffi.Pointer<GtkIconView>, int)>();

  int gtk_icon_view_get_item_padding(
    ffi.Pointer<GtkIconView> icon_view,
  ) {
    return _gtk_icon_view_get_item_padding(
      icon_view,
    );
  }

  late final _gtk_icon_view_get_item_paddingPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GtkIconView>)>>(
          'gtk_icon_view_get_item_padding');
  late final _gtk_icon_view_get_item_padding =
      _gtk_icon_view_get_item_paddingPtr
          .asFunction<int Function(ffi.Pointer<GtkIconView>)>();

  ffi.Pointer<GtkTreePath> gtk_icon_view_get_path_at_pos(
    ffi.Pointer<GtkIconView> icon_view,
    int x,
    int y,
  ) {
    return _gtk_icon_view_get_path_at_pos(
      icon_view,
      x,
      y,
    );
  }

  late final _gtk_icon_view_get_path_at_posPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GtkTreePath> Function(ffi.Pointer<GtkIconView>, gint,
              gint)>>('gtk_icon_view_get_path_at_pos');
  late final _gtk_icon_view_get_path_at_pos =
      _gtk_icon_view_get_path_at_posPtr.asFunction<
          ffi.Pointer<GtkTreePath> Function(
              ffi.Pointer<GtkIconView>, int, int)>();

  int gtk_icon_view_get_item_at_pos(
    ffi.Pointer<GtkIconView> icon_view,
    int x,
    int y,
    ffi.Pointer<ffi.Pointer<GtkTreePath>> path,
    ffi.Pointer<ffi.Pointer<GtkCellRenderer>> cell,
  ) {
    return _gtk_icon_view_get_item_at_pos(
      icon_view,
      x,
      y,
      path,
      cell,
    );
  }

  late final _gtk_icon_view_get_item_at_posPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GtkIconView>,
                  gint,
                  gint,
                  ffi.Pointer<ffi.Pointer<GtkTreePath>>,
                  ffi.Pointer<ffi.Pointer<GtkCellRenderer>>)>>(
      'gtk_icon_view_get_item_at_pos');
  late final _gtk_icon_view_get_item_at_pos =
      _gtk_icon_view_get_item_at_posPtr.asFunction<
          int Function(
              ffi.Pointer<GtkIconView>,
              int,
              int,
              ffi.Pointer<ffi.Pointer<GtkTreePath>>,
              ffi.Pointer<ffi.Pointer<GtkCellRenderer>>)>();

  int gtk_icon_view_get_visible_range(
    ffi.Pointer<GtkIconView> icon_view,
    ffi.Pointer<ffi.Pointer<GtkTreePath>> start_path,
    ffi.Pointer<ffi.Pointer<GtkTreePath>> end_path,
  ) {
    return _gtk_icon_view_get_visible_range(
      icon_view,
      start_path,
      end_path,
    );
  }

  late final _gtk_icon_view_get_visible_rangePtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GtkIconView>,
                  ffi.Pointer<ffi.Pointer<GtkTreePath>>,
                  ffi.Pointer<ffi.Pointer<GtkTreePath>>)>>(
      'gtk_icon_view_get_visible_range');
  late final _gtk_icon_view_get_visible_range =
      _gtk_icon_view_get_visible_rangePtr.asFunction<
          int Function(
              ffi.Pointer<GtkIconView>,
              ffi.Pointer<ffi.Pointer<GtkTreePath>>,
              ffi.Pointer<ffi.Pointer<GtkTreePath>>)>();

  void gtk_icon_view_set_activate_on_single_click(
    ffi.Pointer<GtkIconView> icon_view,
    int single,
  ) {
    return _gtk_icon_view_set_activate_on_single_click(
      icon_view,
      single,
    );
  }

  late final _gtk_icon_view_set_activate_on_single_clickPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GtkIconView>,
              gboolean)>>('gtk_icon_view_set_activate_on_single_click');
  late final _gtk_icon_view_set_activate_on_single_click =
      _gtk_icon_view_set_activate_on_single_clickPtr
          .asFunction<void Function(ffi.Pointer<GtkIconView>, int)>();

  int gtk_icon_view_get_activate_on_single_click(
    ffi.Pointer<GtkIconView> icon_view,
  ) {
    return _gtk_icon_view_get_activate_on_single_click(
      icon_view,
    );
  }

  late final _gtk_icon_view_get_activate_on_single_clickPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GtkIconView>)>>(
          'gtk_icon_view_get_activate_on_single_click');
  late final _gtk_icon_view_get_activate_on_single_click =
      _gtk_icon_view_get_activate_on_single_clickPtr
          .asFunction<int Function(ffi.Pointer<GtkIconView>)>();

  void gtk_icon_view_selected_foreach(
    ffi.Pointer<GtkIconView> icon_view,
    GtkIconViewForeachFunc func,
    gpointer data,
  ) {
    return _gtk_icon_view_selected_foreach(
      icon_view,
      func,
      data,
    );
  }

  late final _gtk_icon_view_selected_foreachPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GtkIconView>, GtkIconViewForeachFunc,
              gpointer)>>('gtk_icon_view_selected_foreach');
  late final _gtk_icon_view_selected_foreach =
      _gtk_icon_view_selected_foreachPtr.asFunction<
          void Function(
              ffi.Pointer<GtkIconView>, GtkIconViewForeachFunc, gpointer)>();

  void gtk_icon_view_set_selection_mode(
    ffi.Pointer<GtkIconView> icon_view,
    int mode,
  ) {
    return _gtk_icon_view_set_selection_mode(
      icon_view,
      mode,
    );
  }

  late final _gtk_icon_view_set_selection_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GtkIconView>,
              ffi.Int32)>>('gtk_icon_view_set_selection_mode');
  late final _gtk_icon_view_set_selection_mode =
      _gtk_icon_view_set_selection_modePtr
          .asFunction<void Function(ffi.Pointer<GtkIconView>, int)>();

  int gtk_icon_view_get_selection_mode(
    ffi.Pointer<GtkIconView> icon_view,
  ) {
    return _gtk_icon_view_get_selection_mode(
      icon_view,
    );
  }

  late final _gtk_icon_view_get_selection_modePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GtkIconView>)>>(
          'gtk_icon_view_get_selection_mode');
  late final _gtk_icon_view_get_selection_mode =
      _gtk_icon_view_get_selection_modePtr
          .asFunction<int Function(ffi.Pointer<GtkIconView>)>();

  void gtk_icon_view_select_path(
    ffi.Pointer<GtkIconView> icon_view,
    ffi.Pointer<GtkTreePath> path,
  ) {
    return _gtk_icon_view_select_path(
      icon_view,
      path,
    );
  }

  late final _gtk_icon_view_select_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GtkIconView>,
              ffi.Pointer<GtkTreePath>)>>('gtk_icon_view_select_path');
  late final _gtk_icon_view_select_path =
      _gtk_icon_view_select_pathPtr.asFunction<
          void Function(ffi.Pointer<GtkIconView>, ffi.Pointer<GtkTreePath>)>();

  void gtk_icon_view_unselect_path(
    ffi.Pointer<GtkIconView> icon_view,
    ffi.Pointer<GtkTreePath> path,
  ) {
    return _gtk_icon_view_unselect_path(
      icon_view,
      path,
    );
  }

  late final _gtk_icon_view_unselect_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GtkIconView>,
              ffi.Pointer<GtkTreePath>)>>('gtk_icon_view_unselect_path');
  late final _gtk_icon_view_unselect_path =
      _gtk_icon_view_unselect_pathPtr.asFunction<
          void Function(ffi.Pointer<GtkIconView>, ffi.Pointer<GtkTreePath>)>();

  int gtk_icon_view_path_is_selected(
    ffi.Pointer<GtkIconView> icon_view,
    ffi.Pointer<GtkTreePath> path,
  ) {
    return _gtk_icon_view_path_is_selected(
      icon_view,
      path,
    );
  }

  late final _gtk_icon_view_path_is_selectedPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GtkIconView>,
              ffi.Pointer<GtkTreePath>)>>('gtk_icon_view_path_is_selected');
  late final _gtk_icon_view_path_is_selected =
      _gtk_icon_view_path_is_selectedPtr.asFunction<
          int Function(ffi.Pointer<GtkIconView>, ffi.Pointer<GtkTreePath>)>();

  int gtk_icon_view_get_item_row(
    ffi.Pointer<GtkIconView> icon_view,
    ffi.Pointer<GtkTreePath> path,
  ) {
    return _gtk_icon_view_get_item_row(
      icon_view,
      path,
    );
  }

  late final _gtk_icon_view_get_item_rowPtr = _lookup<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<GtkIconView>,
              ffi.Pointer<GtkTreePath>)>>('gtk_icon_view_get_item_row');
  late final _gtk_icon_view_get_item_row =
      _gtk_icon_view_get_item_rowPtr.asFunction<
          int Function(ffi.Pointer<GtkIconView>, ffi.Pointer<GtkTreePath>)>();

  int gtk_icon_view_get_item_column(
    ffi.Pointer<GtkIconView> icon_view,
    ffi.Pointer<GtkTreePath> path,
  ) {
    return _gtk_icon_view_get_item_column(
      icon_view,
      path,
    );
  }

  late final _gtk_icon_view_get_item_columnPtr = _lookup<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<GtkIconView>,
              ffi.Pointer<GtkTreePath>)>>('gtk_icon_view_get_item_column');
  late final _gtk_icon_view_get_item_column =
      _gtk_icon_view_get_item_columnPtr.asFunction<
          int Function(ffi.Pointer<GtkIconView>, ffi.Pointer<GtkTreePath>)>();

  ffi.Pointer<GList> gtk_icon_view_get_selected_items(
    ffi.Pointer<GtkIconView> icon_view,
  ) {
    return _gtk_icon_view_get_selected_items(
      icon_view,
    );
  }

  late final _gtk_icon_view_get_selected_itemsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GtkIconView>)>>('gtk_icon_view_get_selected_items');
  late final _gtk_icon_view_get_selected_items =
      _gtk_icon_view_get_selected_itemsPtr
          .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GtkIconView>)>();

  void gtk_icon_view_select_all(
    ffi.Pointer<GtkIconView> icon_view,
  ) {
    return _gtk_icon_view_select_all(
      icon_view,
    );
  }

  late final _gtk_icon_view_select_allPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GtkIconView>)>>(
          'gtk_icon_view_select_all');
  late final _gtk_icon_view_select_all = _gtk_icon_view_select_allPtr
      .asFunction<void Function(ffi.Pointer<GtkIconView>)>();

  void gtk_icon_view_unselect_all(
    ffi.Pointer<GtkIconView> icon_view,
  ) {
    return _gtk_icon_view_unselect_all(
      icon_view,
    );
  }

  late final _gtk_icon_view_unselect_allPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GtkIconView>)>>(
          'gtk_icon_view_unselect_all');
  late final _gtk_icon_view_unselect_all = _gtk_icon_view_unselect_allPtr
      .asFunction<void Function(ffi.Pointer<GtkIconView>)>();

  void gtk_icon_view_item_activated(
    ffi.Pointer<GtkIconView> icon_view,
    ffi.Pointer<GtkTreePath> path,
  ) {
    return _gtk_icon_view_item_activated(
      icon_view,
      path,
    );
  }

  late final _gtk_icon_view_item_activatedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GtkIconView>,
              ffi.Pointer<GtkTreePath>)>>('gtk_icon_view_item_activated');
  late final _gtk_icon_view_item_activated =
      _gtk_icon_view_item_activatedPtr.asFunction<
          void Function(ffi.Pointer<GtkIconView>, ffi.Pointer<GtkTreePath>)>();

  void gtk_icon_view_set_cursor(
    ffi.Pointer<GtkIconView> icon_view,
    ffi.Pointer<GtkTreePath> path,
    ffi.Pointer<GtkCellRenderer> cell,
    int start_editing,
  ) {
    return _gtk_icon_view_set_cursor(
      icon_view,
      path,
      cell,
      start_editing,
    );
  }

  late final _gtk_icon_view_set_cursorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GtkIconView>,
              ffi.Pointer<GtkTreePath>,
              ffi.Pointer<GtkCellRenderer>,
              gboolean)>>('gtk_icon_view_set_cursor');
  late final _gtk_icon_view_set_cursor =
      _gtk_icon_view_set_cursorPtr.asFunction<
          void Function(ffi.Pointer<GtkIconView>, ffi.Pointer<GtkTreePath>,
              ffi.Pointer<GtkCellRenderer>, int)>();

  int gtk_icon_view_get_cursor(
    ffi.Pointer<GtkIconView> icon_view,
    ffi.Pointer<ffi.Pointer<GtkTreePath>> path,
    ffi.Pointer<ffi.Pointer<GtkCellRenderer>> cell,
  ) {
    return _gtk_icon_view_get_cursor(
      icon_view,
      path,
      cell,
    );
  }

  late final _gtk_icon_view_get_cursorPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GtkIconView>,
                  ffi.Pointer<ffi.Pointer<GtkTreePath>>,
                  ffi.Pointer<ffi.Pointer<GtkCellRenderer>>)>>(
      'gtk_icon_view_get_cursor');
  late final _gtk_icon_view_get_cursor =
      _gtk_icon_view_get_cursorPtr.asFunction<
          int Function(
              ffi.Pointer<GtkIconView>,
              ffi.Pointer<ffi.Pointer<GtkTreePath>>,
              ffi.Pointer<ffi.Pointer<GtkCellRenderer>>)>();

  void gtk_icon_view_scroll_to_path(
    ffi.Pointer<GtkIconView> icon_view,
    ffi.Pointer<GtkTreePath> path,
    int use_align,
    double row_align,
    double col_align,
  ) {
    return _gtk_icon_view_scroll_to_path(
      icon_view,
      path,
      use_align,
      row_align,
      col_align,
    );
  }

  late final _gtk_icon_view_scroll_to_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GtkIconView>, ffi.Pointer<GtkTreePath>,
              gboolean, gfloat, gfloat)>>('gtk_icon_view_scroll_to_path');
  late final _gtk_icon_view_scroll_to_path =
      _gtk_icon_view_scroll_to_pathPtr.asFunction<
          void Function(ffi.Pointer<GtkIconView>, ffi.Pointer<GtkTreePath>, int,
              double, double)>();

  void gtk_icon_view_enable_model_drag_source(
    ffi.Pointer<GtkIconView> icon_view,
    int start_button_mask,
    ffi.Pointer<GtkTargetEntry> targets,
    int n_targets,
    int actions,
  ) {
    return _gtk_icon_view_enable_model_drag_source(
      icon_view,
      start_button_mask,
      targets,
      n_targets,
      actions,
    );
  }

  late final _gtk_icon_view_enable_model_drag_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GtkIconView>,
              ffi.Int32,
              ffi.Pointer<GtkTargetEntry>,
              gint,
              ffi.Int32)>>('gtk_icon_view_enable_model_drag_source');
  late final _gtk_icon_view_enable_model_drag_source =
      _gtk_icon_view_enable_model_drag_sourcePtr.asFunction<
          void Function(ffi.Pointer<GtkIconView>, int,
              ffi.Pointer<GtkTargetEntry>, int, int)>();

  void gtk_icon_view_enable_model_drag_dest(
    ffi.Pointer<GtkIconView> icon_view,
    ffi.Pointer<GtkTargetEntry> targets,
    int n_targets,
    int actions,
  ) {
    return _gtk_icon_view_enable_model_drag_dest(
      icon_view,
      targets,
      n_targets,
      actions,
    );
  }

  late final _gtk_icon_view_enable_model_drag_destPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GtkIconView>,
              ffi.Pointer<GtkTargetEntry>,
              gint,
              ffi.Int32)>>('gtk_icon_view_enable_model_drag_dest');
  late final _gtk_icon_view_enable_model_drag_dest =
      _gtk_icon_view_enable_model_drag_destPtr.asFunction<
          void Function(ffi.Pointer<GtkIconView>, ffi.Pointer<GtkTargetEntry>,
              int, int)>();

  void gtk_icon_view_unset_model_drag_source(
    ffi.Pointer<GtkIconView> icon_view,
  ) {
    return _gtk_icon_view_unset_model_drag_source(
      icon_view,
    );
  }

  late final _gtk_icon_view_unset_model_drag_sourcePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GtkIconView>)>>(
          'gtk_icon_view_unset_model_drag_source');
  late final _gtk_icon_view_unset_model_drag_source =
      _gtk_icon_view_unset_model_drag_sourcePtr
          .asFunction<void Function(ffi.Pointer<GtkIconView>)>();

  void gtk_icon_view_unset_model_drag_dest(
    ffi.Pointer<GtkIconView> icon_view,
  ) {
    return _gtk_icon_view_unset_model_drag_dest(
      icon_view,
    );
  }

  late final _gtk_icon_view_unset_model_drag_destPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GtkIconView>)>>(
          'gtk_icon_view_unset_model_drag_dest');
  late final _gtk_icon_view_unset_model_drag_dest =
      _gtk_icon_view_unset_model_drag_destPtr
          .asFunction<void Function(ffi.Pointer<GtkIconView>)>();

  void gtk_icon_view_set_reorderable(
    ffi.Pointer<GtkIconView> icon_view,
    int reorderable,
  ) {
    return _gtk_icon_view_set_reorderable(
      icon_view,
      reorderable,
    );
  }

  late final _gtk_icon_view_set_reorderablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GtkIconView>,
              gboolean)>>('gtk_icon_view_set_reorderable');
  late final _gtk_icon_view_set_reorderable = _gtk_icon_view_set_reorderablePtr
      .asFunction<void Function(ffi.Pointer<GtkIconView>, int)>();

  int gtk_icon_view_get_reorderable(
    ffi.Pointer<GtkIconView> icon_view,
  ) {
    return _gtk_icon_view_get_reorderable(
      icon_view,
    );
  }

  late final _gtk_icon_view_get_reorderablePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GtkIconView>)>>(
          'gtk_icon_view_get_reorderable');
  late final _gtk_icon_view_get_reorderable = _gtk_icon_view_get_reorderablePtr
      .asFunction<int Function(ffi.Pointer<GtkIconView>)>();

  void gtk_icon_view_set_drag_dest_item(
    ffi.Pointer<GtkIconView> icon_view,
    ffi.Pointer<GtkTreePath> path,
    int pos,
  ) {
    return _gtk_icon_view_set_drag_dest_item(
      icon_view,
      path,
      pos,
    );
  }

  late final _gtk_icon_view_set_drag_dest_itemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GtkIconView>, ffi.Pointer<GtkTreePath>,
              ffi.Int32)>>('gtk_icon_view_set_drag_dest_item');
  late final _gtk_icon_view_set_drag_dest_item =
      _gtk_icon_view_set_drag_dest_itemPtr.asFunction<
          void Function(
              ffi.Pointer<GtkIconView>, ffi.Pointer<GtkTreePath>, int)>();

  void gtk_icon_view_get_drag_dest_item(
    ffi.Pointer<GtkIconView> icon_view,
    ffi.Pointer<ffi.Pointer<GtkTreePath>> path,
    ffi.Pointer<ffi.Int32> pos,
  ) {
    return _gtk_icon_view_get_drag_dest_item(
      icon_view,
      path,
      pos,
    );
  }

  late final _gtk_icon_view_get_drag_dest_itemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GtkIconView>,
              ffi.Pointer<ffi.Pointer<GtkTreePath>>,
              ffi.Pointer<ffi.Int32>)>>('gtk_icon_view_get_drag_dest_item');
  late final _gtk_icon_view_get_drag_dest_item =
      _gtk_icon_view_get_drag_dest_itemPtr.asFunction<
          void Function(ffi.Pointer<GtkIconView>,
              ffi.Pointer<ffi.Pointer<GtkTreePath>>, ffi.Pointer<ffi.Int32>)>();

  int gtk_icon_view_get_dest_item_at_pos(
    ffi.Pointer<GtkIconView> icon_view,
    int drag_x,
    int drag_y,
    ffi.Pointer<ffi.Pointer<GtkTreePath>> path,
    ffi.Pointer<ffi.Int32> pos,
  ) {
    return _gtk_icon_view_get_dest_item_at_pos(
      icon_view,
      drag_x,
      drag_y,
      path,
      pos,
    );
  }

  late final _gtk_icon_view_get_dest_item_at_posPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GtkIconView>,
              gint,
              gint,
              ffi.Pointer<ffi.Pointer<GtkTreePath>>,
              ffi.Pointer<ffi.Int32>)>>('gtk_icon_view_get_dest_item_at_pos');
  late final _gtk_icon_view_get_dest_item_at_pos =
      _gtk_icon_view_get_dest_item_at_posPtr.asFunction<
          int Function(ffi.Pointer<GtkIconView>, int, int,
              ffi.Pointer<ffi.Pointer<GtkTreePath>>, ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<cairo_surface_t> gtk_icon_view_create_drag_icon(
    ffi.Pointer<GtkIconView> icon_view,
    ffi.Pointer<GtkTreePath> path,
  ) {
    return _gtk_icon_view_create_drag_icon(
      icon_view,
      path,
    );
  }

  late final _gtk_icon_view_create_drag_iconPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_surface_t> Function(ffi.Pointer<GtkIconView>,
              ffi.Pointer<GtkTreePath>)>>('gtk_icon_view_create_drag_icon');
  late final _gtk_icon_view_create_drag_icon =
      _gtk_icon_view_create_drag_iconPtr.asFunction<
          ffi.Pointer<cairo_surface_t> Function(
              ffi.Pointer<GtkIconView>, ffi.Pointer<GtkTreePath>)>();

  void gtk_icon_view_convert_widget_to_bin_window_coords(
    ffi.Pointer<GtkIconView> icon_view,
    int wx,
    int wy,
    ffi.Pointer<gint> bx,
    ffi.Pointer<gint> by,
  ) {
    return _gtk_icon_view_convert_widget_to_bin_window_coords(
      icon_view,
      wx,
      wy,
      bx,
      by,
    );
  }

  late final _gtk_icon_view_convert_widget_to_bin_window_coordsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GtkIconView>, gint, gint,
                  ffi.Pointer<gint>, ffi.Pointer<gint>)>>(
      'gtk_icon_view_convert_widget_to_bin_window_coords');
  late final _gtk_icon_view_convert_widget_to_bin_window_coords =
      _gtk_icon_view_convert_widget_to_bin_window_coordsPtr.asFunction<
          void Function(ffi.Pointer<GtkIconView>, int, int, ffi.Pointer<gint>,
              ffi.Pointer<gint>)>();

  int gtk_icon_view_get_cell_rect(
    ffi.Pointer<GtkIconView> icon_view,
    ffi.Pointer<GtkTreePath> path,
    ffi.Pointer<GtkCellRenderer> cell,
    ffi.Pointer<GdkRectangle> rect,
  ) {
    return _gtk_icon_view_get_cell_rect(
      icon_view,
      path,
      cell,
      rect,
    );
  }

  late final _gtk_icon_view_get_cell_rectPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GtkIconView>,
              ffi.Pointer<GtkTreePath>,
              ffi.Pointer<GtkCellRenderer>,
              ffi.Pointer<GdkRectangle>)>>('gtk_icon_view_get_cell_rect');
  late final _gtk_icon_view_get_cell_rect =
      _gtk_icon_view_get_cell_rectPtr.asFunction<
          int Function(ffi.Pointer<GtkIconView>, ffi.Pointer<GtkTreePath>,
              ffi.Pointer<GtkCellRenderer>, ffi.Pointer<GdkRectangle>)>();

  void gtk_icon_view_set_tooltip_item(
    ffi.Pointer<GtkIconView> icon_view,
    ffi.Pointer<GtkTooltip> tooltip,
    ffi.Pointer<GtkTreePath> path,
  ) {
    return _gtk_icon_view_set_tooltip_item(
      icon_view,
      tooltip,
      path,
    );
  }

  late final _gtk_icon_view_set_tooltip_itemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GtkIconView>, ffi.Pointer<GtkTooltip>,
              ffi.Pointer<GtkTreePath>)>>('gtk_icon_view_set_tooltip_item');
  late final _gtk_icon_view_set_tooltip_item =
      _gtk_icon_view_set_tooltip_itemPtr.asFunction<
          void Function(ffi.Pointer<GtkIconView>, ffi.Pointer<GtkTooltip>,
              ffi.Pointer<GtkTreePath>)>();

  void gtk_icon_view_set_tooltip_cell(
    ffi.Pointer<GtkIconView> icon_view,
    ffi.Pointer<GtkTooltip> tooltip,
    ffi.Pointer<GtkTreePath> path,
    ffi.Pointer<GtkCellRenderer> cell,
  ) {
    return _gtk_icon_view_set_tooltip_cell(
      icon_view,
      tooltip,
      path,
      cell,
    );
  }

  late final _gtk_icon_view_set_tooltip_cellPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GtkIconView>,
              ffi.Pointer<GtkTooltip>,
              ffi.Pointer<GtkTreePath>,
              ffi.Pointer<GtkCellRenderer>)>>('gtk_icon_view_set_tooltip_cell');
  late final _gtk_icon_view_set_tooltip_cell =
      _gtk_icon_view_set_tooltip_cellPtr.asFunction<
          void Function(ffi.Pointer<GtkIconView>, ffi.Pointer<GtkTooltip>,
              ffi.Pointer<GtkTreePath>, ffi.Pointer<GtkCellRenderer>)>();

  int gtk_icon_view_get_tooltip_context(
    ffi.Pointer<GtkIconView> icon_view,
    ffi.Pointer<gint> x,
    ffi.Pointer<gint> y,
    int keyboard_tip,
    ffi.Pointer<ffi.Pointer<GtkTreeModel>> model,
    ffi.Pointer<ffi.Pointer<GtkTreePath>> path,
    ffi.Pointer<GtkTreeIter> iter,
  ) {
    return _gtk_icon_view_get_tooltip_context(
      icon_view,
      x,
      y,
      keyboard_tip,
      model,
      path,
      iter,
    );
  }

  late final _gtk_icon_view_get_tooltip_contextPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GtkIconView>,
              ffi.Pointer<gint>,
              ffi.Pointer<gint>,
              gboolean,
              ffi.Pointer<ffi.Pointer<GtkTreeModel>>,
              ffi.Pointer<ffi.Pointer<GtkTreePath>>,
              ffi.Pointer<GtkTreeIter>)>>('gtk_icon_view_get_tooltip_context');
  late final _gtk_icon_view_get_tooltip_context =
      _gtk_icon_view_get_tooltip_contextPtr.asFunction<
          int Function(
              ffi.Pointer<GtkIconView>,
              ffi.Pointer<gint>,
              ffi.Pointer<gint>,
              int,
              ffi.Pointer<ffi.Pointer<GtkTreeModel>>,
              ffi.Pointer<ffi.Pointer<GtkTreePath>>,
              ffi.Pointer<GtkTreeIter>)>();

  void gtk_icon_view_set_tooltip_column(
    ffi.Pointer<GtkIconView> icon_view,
    int column,
  ) {
    return _gtk_icon_view_set_tooltip_column(
      icon_view,
      column,
    );
  }

  late final _gtk_icon_view_set_tooltip_columnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GtkIconView>,
              gint)>>('gtk_icon_view_set_tooltip_column');
  late final _gtk_icon_view_set_tooltip_column =
      _gtk_icon_view_set_tooltip_columnPtr
          .asFunction<void Function(ffi.Pointer<GtkIconView>, int)>();

  int gtk_icon_view_get_tooltip_column(
    ffi.Pointer<GtkIconView> icon_view,
  ) {
    return _gtk_icon_view_get_tooltip_column(
      icon_view,
    );
  }

  late final _gtk_icon_view_get_tooltip_columnPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GtkIconView>)>>(
          'gtk_icon_view_get_tooltip_column');
  late final _gtk_icon_view_get_tooltip_column =
      _gtk_icon_view_get_tooltip_columnPtr
          .asFunction<int Function(ffi.Pointer<GtkIconView>)>();

  int gtk_icon_size_get_type() {
    return _gtk_icon_size_get_type();
  }

  late final _gtk_icon_size_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gtk_icon_size_get_type');
  late final _gtk_icon_size_get_type =
      _gtk_icon_size_get_typePtr.asFunction<int Function()>();

  int gtk_icon_lookup_flags_get_type() {
    return _gtk_icon_lookup_flags_get_type();
  }

  late final _gtk_icon_lookup_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gtk_icon_lookup_flags_get_type');
  late final _gtk_icon_lookup_flags_get_type =
      _gtk_icon_lookup_flags_get_typePtr.asFunction<int Function()>();

  int gtk_icon_theme_error_get_type() {
    return _gtk_icon_theme_error_get_type();
  }

  late final _gtk_icon_theme_error_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gtk_icon_theme_error_get_type');
  late final _gtk_icon_theme_error_get_type =
      _gtk_icon_theme_error_get_typePtr.asFunction<int Function()>();

  int gtk_icon_view_drop_position_get_type() {
    return _gtk_icon_view_drop_position_get_type();
  }

  late final _gtk_icon_view_drop_position_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gtk_icon_view_drop_position_get_type');
  late final _gtk_icon_view_drop_position_get_type =
      _gtk_icon_view_drop_position_get_typePtr.asFunction<int Function()>();
}

typedef gconstpointer = ffi.Pointer<ffi.Void>;
typedef GBytes = _GBytes;

class _GBytes extends ffi.Opaque {}

typedef gsize = ffi.UnsignedLong;
typedef gpointer = ffi.Pointer<ffi.Void>;
typedef GList = _GList;

class _GList extends ffi.Struct {
  external gpointer data;

  external ffi.Pointer<GList1> next;

  external ffi.Pointer<GList1> prev;
}

typedef GList1 = _GList;
typedef gchar = ffi.Char;

/// GResourceLookupFlags:
/// @G_RESOURCE_LOOKUP_FLAGS_NONE: No flags set.
///
/// GResourceLookupFlags determine how resource path lookups are handled.
///
/// Since: 2.32
abstract class GResourceLookupFlags {
  static const int G_RESOURCE_LOOKUP_FLAGS_NONE = 0;
}

/// GError:
/// @domain: error domain, e.g. %G_FILE_ERROR
/// @code: error code, e.g. %G_FILE_ERROR_NOENT
/// @message: human-readable informative error message
///
/// The `GError` structure contains information about
/// an error that has occurred.
typedef GError = _GError;

class _GError extends ffi.Struct {
  @GQuark()
  external int domain;

  @gint()
  external int code;

  external ffi.Pointer<gchar> message;
}

typedef GQuark = guint32;
typedef guint32 = ffi.UnsignedInt;
typedef gint = ffi.Int;
typedef GType = gsize;
typedef GtkIconFactory = _GtkIconFactory;

class _GtkIconFactory extends ffi.Struct {
  external GObject parent_instance;

  external ffi.Pointer<GtkIconFactoryPrivate> priv;
}

typedef GObject = _GObject;

/// GObject:
///
/// The base object type.
///
/// All the fields in the `GObject` structure are private to the implementation
/// and should never be accessed directly.
///
/// Since GLib 2.72, all #GObjects are guaranteed to be aligned to at least the
/// alignment of the largest basic GLib type (typically this is #guint64 or
/// #gdouble). If you need larger alignment for an element in a #GObject, you
/// should allocate it on the heap (aligned), or arrange for your #GObject to be
/// appropriately padded. This guarantee applies to the #GObject (or derived)
/// struct, the #GObjectClass (or derived) struct, and any private data allocated
/// by G_ADD_PRIVATE().
class _GObject extends ffi.Struct {
  external GTypeInstance g_type_instance;

  @guint()
  external int ref_count;

  external ffi.Pointer<GData> qdata;
}

typedef GTypeInstance = _GTypeInstance;

/// GTypeInstance:
///
/// An opaque structure used as the base of all type instances.
class _GTypeInstance extends ffi.Struct {
  external ffi.Pointer<GTypeClass> g_class;
}

typedef GTypeClass = _GTypeClass;

/// GTypeClass:
///
/// An opaque structure used as the base of all classes.
class _GTypeClass extends ffi.Struct {
  @GType()
  external int g_type;
}

typedef guint = ffi.UnsignedInt;
typedef GData = _GData;

class _GData extends ffi.Opaque {}

typedef GtkIconFactoryPrivate = _GtkIconFactoryPrivate;

class _GtkIconFactoryPrivate extends ffi.Opaque {}

typedef GtkIconSet = _GtkIconSet;

class _GtkIconSet extends ffi.Opaque {}

typedef gboolean = gint;

/// GtkIconSize:
/// @GTK_ICON_SIZE_INVALID: Invalid size.
/// @GTK_ICON_SIZE_MENU: Size appropriate for menus (16px).
/// @GTK_ICON_SIZE_SMALL_TOOLBAR: Size appropriate for small toolbars (16px).
/// @GTK_ICON_SIZE_LARGE_TOOLBAR: Size appropriate for large toolbars (24px)
/// @GTK_ICON_SIZE_BUTTON: Size appropriate for buttons (16px)
/// @GTK_ICON_SIZE_DND: Size appropriate for drag and drop (32px)
/// @GTK_ICON_SIZE_DIALOG: Size appropriate for dialogs (48px)
///
/// Built-in stock icon sizes.
abstract class GtkIconSize {
  static const int GTK_ICON_SIZE_INVALID = 0;
  static const int GTK_ICON_SIZE_MENU = 1;
  static const int GTK_ICON_SIZE_SMALL_TOOLBAR = 2;
  static const int GTK_ICON_SIZE_LARGE_TOOLBAR = 3;
  static const int GTK_ICON_SIZE_BUTTON = 4;
  static const int GTK_ICON_SIZE_DND = 5;
  static const int GTK_ICON_SIZE_DIALOG = 6;
}

typedef GtkSettings = _GtkSettings;

class _GtkSettings extends ffi.Struct {
  external GObject parent_instance;

  external ffi.Pointer<GtkSettingsPrivate> priv;
}

typedef GtkSettingsPrivate = _GtkSettingsPrivate;

class _GtkSettingsPrivate extends ffi.Opaque {}

typedef GdkPixbuf = _GdkPixbuf;

class _GdkPixbuf extends ffi.Opaque {}

typedef GtkStyle = _GtkStyle;

/// GtkStyle:
/// @fg: Set of foreground #GdkColor
/// @bg: Set of background #GdkColor
/// @light: Set of light #GdkColor
/// @dark: Set of dark #GdkColor
/// @mid: Set of mid #GdkColor
/// @text: Set of text #GdkColor
/// @base: Set of base #GdkColor
/// @text_aa: Color halfway between text/base
/// @black: #GdkColor to use for black
/// @white: #GdkColor to use for white
/// @font_desc: #PangoFontDescription
/// @xthickness: Thickness in X direction
/// @ythickness: Thickness in Y direction
/// @background: Set of background #cairo_pattern_t
class _GtkStyle extends ffi.Struct {
  external GObject parent_instance;

  @ffi.Array.multi([5])
  external ffi.Array<GdkColor> fg;

  @ffi.Array.multi([5])
  external ffi.Array<GdkColor> bg;

  @ffi.Array.multi([5])
  external ffi.Array<GdkColor> light;

  @ffi.Array.multi([5])
  external ffi.Array<GdkColor> dark;

  @ffi.Array.multi([5])
  external ffi.Array<GdkColor> mid;

  @ffi.Array.multi([5])
  external ffi.Array<GdkColor> text;

  @ffi.Array.multi([5])
  external ffi.Array<GdkColor> base;

  @ffi.Array.multi([5])
  external ffi.Array<GdkColor> text_aa;

  external GdkColor black;

  external GdkColor white;

  external ffi.Pointer<PangoFontDescription> font_desc;

  @gint()
  external int xthickness;

  @gint()
  external int ythickness;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Pointer<cairo_pattern_t>> background;

  @gint()
  external int attach_count;

  external ffi.Pointer<GdkVisual> visual;

  external ffi.Pointer<PangoFontDescription> private_font_desc;

  external ffi.Pointer<GtkRcStyle> rc_style;

  external ffi.Pointer<GSList> styles;

  external ffi.Pointer<GArray> property_cache;

  external ffi.Pointer<GSList> icon_factories;
}

typedef GdkColor = _GdkColor;

/// GdkColor:
/// @pixel: For allocated colors, the pixel value used to
/// draw this color on the screen. Not used anymore.
/// @red: The red component of the color. This is
/// a value between 0 and 65535, with 65535 indicating
/// full intensity
/// @green: The green component of the color
/// @blue: The blue component of the color
///
/// A #GdkColor is used to describe a color,
/// similar to the XColor struct used in the X11 drawing API.
///
/// Deprecated: 3.14: Use #GdkRGBA
class _GdkColor extends ffi.Struct {
  @guint32()
  external int pixel;

  @guint16()
  external int red;

  @guint16()
  external int green;

  @guint16()
  external int blue;
}

typedef guint16 = ffi.UnsignedShort;

/// PangoFontDescription:
///
/// A `PangoFontDescription` describes a font in an implementation-independent
/// manner.
///
/// `PangoFontDescription` structures are used both to list what fonts are
/// available on the system and also for specifying the characteristics of
/// a font to load.
typedef PangoFontDescription = _PangoFontDescription;

class _PangoFontDescription extends ffi.Opaque {}

/// cairo_pattern_t:
///
/// A #cairo_pattern_t represents a source when drawing onto a
/// surface. There are different subtypes of #cairo_pattern_t,
/// for different types of sources; for example,
/// cairo_pattern_create_rgb() creates a pattern for a solid
/// opaque color.
///
/// Other than various
/// <function>cairo_pattern_create_<emphasis>type</emphasis>()</function>
/// functions, some of the pattern types can be implicitly created using various
/// <function>cairo_set_source_<emphasis>type</emphasis>()</function> functions;
/// for example cairo_set_source_rgb().
///
/// The type of a pattern can be queried with cairo_pattern_get_type().
///
/// Memory management of #cairo_pattern_t is done with
/// cairo_pattern_reference() and cairo_pattern_destroy().
///
/// Since: 1.0
typedef cairo_pattern_t = _cairo_pattern;

class _cairo_pattern extends ffi.Opaque {}

typedef GdkVisual = _GdkVisual;

class _GdkVisual extends ffi.Opaque {}

typedef GtkRcStyle = _GtkRcStyle;

/// GtkRcStyle:
/// @name: Name
/// @bg_pixmap_name: Pixmap name
/// @font_desc: A #PangoFontDescription
/// @color_flags: #GtkRcFlags
/// @fg: Foreground colors
/// @bg: Background colors
/// @text: Text colors
/// @base: Base colors
/// @xthickness: X thickness
/// @ythickness: Y thickness
///
/// The #GtkRcStyle-struct is used to represent a set
/// of information about the appearance of a widget.
/// This can later be composited together with other
/// #GtkRcStyle-struct<!-- -->s to form a #GtkStyle.
class _GtkRcStyle extends ffi.Opaque {}

typedef GSList = _GSList;

class _GSList extends ffi.Struct {
  external gpointer data;

  external ffi.Pointer<GSList1> next;
}

typedef GSList1 = _GSList;
typedef GArray = _GArray;

class _GArray extends ffi.Struct {
  external ffi.Pointer<gchar> data;

  @guint()
  external int len;
}

/// GtkTextDirection:
/// @GTK_TEXT_DIR_NONE: No direction.
/// @GTK_TEXT_DIR_LTR: Left to right text direction.
/// @GTK_TEXT_DIR_RTL: Right to left text direction.
///
/// Reading directions for text.
abstract class GtkTextDirection {
  static const int GTK_TEXT_DIR_NONE = 0;
  static const int GTK_TEXT_DIR_LTR = 1;
  static const int GTK_TEXT_DIR_RTL = 2;
}

/// GtkStateType:
/// @GTK_STATE_NORMAL: State during normal operation.
/// @GTK_STATE_ACTIVE: State of a currently active widget, such as a depressed button.
/// @GTK_STATE_PRELIGHT: State indicating that the mouse pointer is over
/// the widget and the widget will respond to mouse clicks.
/// @GTK_STATE_SELECTED: State of a selected item, such the selected row in a list.
/// @GTK_STATE_INSENSITIVE: State indicating that the widget is
/// unresponsive to user actions.
/// @GTK_STATE_INCONSISTENT: The widget is inconsistent, such as checkbuttons
/// or radiobuttons that aren’t either set to %TRUE nor %FALSE,
/// or buttons requiring the user attention.
/// @GTK_STATE_FOCUSED: The widget has the keyboard focus.
///
/// This type indicates the current state of a widget; the state determines how
/// the widget is drawn. The #GtkStateType enumeration is also used to
/// identify different colors in a #GtkStyle for drawing, so states can be
/// used for subparts of a widget as well as entire widgets.
///
/// Deprecated: 3.14: All APIs that are using this enumeration have been deprecated
/// in favor of alternatives using #GtkStateFlags.
abstract class GtkStateType {
  static const int GTK_STATE_NORMAL = 0;
  static const int GTK_STATE_ACTIVE = 1;
  static const int GTK_STATE_PRELIGHT = 2;
  static const int GTK_STATE_SELECTED = 3;
  static const int GTK_STATE_INSENSITIVE = 4;
  static const int GTK_STATE_INCONSISTENT = 5;
  static const int GTK_STATE_FOCUSED = 6;
}

typedef GtkWidget = _GtkWidget;

class _GtkWidget extends ffi.Struct {
  external GInitiallyUnowned parent_instance;

  external ffi.Pointer<GtkWidgetPrivate> priv;
}

typedef GInitiallyUnowned = _GObject;
typedef GtkWidgetPrivate = _GtkWidgetPrivate;

class _GtkWidgetPrivate extends ffi.Opaque {}

typedef GtkIconSource = _GtkIconSource;

class _GtkIconSource extends ffi.Opaque {}

typedef GtkStyleContext = _GtkStyleContext;

class _GtkStyleContext extends ffi.Struct {
  external GObject parent_object;

  external ffi.Pointer<GtkStyleContextPrivate> priv;
}

typedef GtkStyleContextPrivate = _GtkStyleContextPrivate;

class _GtkStyleContextPrivate extends ffi.Opaque {}

/// cairo_surface_t:
///
/// A #cairo_surface_t represents an image, either as the destination
/// of a drawing operation or as source when drawing onto another
/// surface.  To draw to a #cairo_surface_t, create a cairo context
/// with the surface as the target, using cairo_create().
///
/// There are different subtypes of #cairo_surface_t for
/// different drawing backends; for example, cairo_image_surface_create()
/// creates a bitmap image in memory.
/// The type of a surface can be queried with cairo_surface_get_type().
///
/// The initial contents of a surface after creation depend upon the manner
/// of its creation. If cairo creates the surface and backing storage for
/// the user, it will be initially cleared; for example,
/// cairo_image_surface_create() and cairo_surface_create_similar().
/// Alternatively, if the user passes in a reference to some backing storage
/// and asks cairo to wrap that in a #cairo_surface_t, then the contents are
/// not modified; for example, cairo_image_surface_create_for_data() and
/// cairo_xlib_surface_create().
///
/// Memory management of #cairo_surface_t is done with
/// cairo_surface_reference() and cairo_surface_destroy().
///
/// Since: 1.0
typedef cairo_surface_t = _cairo_surface;

class _cairo_surface extends ffi.Opaque {}

typedef GdkWindow = _GdkWindow;

class _GdkWindow extends ffi.Opaque {}

typedef GtkIconTheme = _GtkIconTheme;

/// GtkIconTheme:
///
/// Acts as a database of information about an icon theme.
/// Normally, you retrieve the icon theme for a particular
/// screen using gtk_icon_theme_get_for_screen() and it
/// will contain information about current icon theme for
/// that screen, but you can also create a new #GtkIconTheme
/// object and set the icon theme name explicitly using
/// gtk_icon_theme_set_custom_theme().
class _GtkIconTheme extends ffi.Struct {
  external GObject parent_instance;

  external ffi.Pointer<GtkIconThemePrivate> priv;
}

typedef GtkIconThemePrivate = _GtkIconThemePrivate;

class _GtkIconThemePrivate extends ffi.Opaque {}

typedef GdkScreen = _GdkScreen;

class _GdkScreen extends ffi.Opaque {}

/// GtkIconInfo:
///
/// Contains information found when looking up an icon in
/// an icon theme.
typedef GtkIconInfo = _GtkIconInfo;

class _GtkIconInfo extends ffi.Opaque {}

/// GtkIconLookupFlags:
/// @GTK_ICON_LOOKUP_NO_SVG: Never get SVG icons, even if gdk-pixbuf
/// supports them. Cannot be used together with %GTK_ICON_LOOKUP_FORCE_SVG.
/// @GTK_ICON_LOOKUP_FORCE_SVG: Get SVG icons, even if gdk-pixbuf
/// doesn’t support them.
/// Cannot be used together with %GTK_ICON_LOOKUP_NO_SVG.
/// @GTK_ICON_LOOKUP_USE_BUILTIN: When passed to
/// gtk_icon_theme_lookup_icon() includes builtin icons
/// as well as files. For a builtin icon, gtk_icon_info_get_filename()
/// is %NULL and you need to call gtk_icon_info_get_builtin_pixbuf().
/// @GTK_ICON_LOOKUP_GENERIC_FALLBACK: Try to shorten icon name at '-'
/// characters before looking at inherited themes. This flag is only
/// supported in functions that take a single icon name. For more general
/// fallback, see gtk_icon_theme_choose_icon(). Since 2.12.
/// @GTK_ICON_LOOKUP_FORCE_SIZE: Always get the icon scaled to the
/// requested size. Since 2.14.
/// @GTK_ICON_LOOKUP_FORCE_REGULAR: Try to always load regular icons, even
/// when symbolic icon names are given. Since 3.14.
/// @GTK_ICON_LOOKUP_FORCE_SYMBOLIC: Try to always load symbolic icons, even
/// when regular icon names are given. Since 3.14.
/// @GTK_ICON_LOOKUP_DIR_LTR: Try to load a variant of the icon for left-to-right
/// text direction. Since 3.14.
/// @GTK_ICON_LOOKUP_DIR_RTL: Try to load a variant of the icon for right-to-left
/// text direction. Since 3.14.
///
/// Used to specify options for gtk_icon_theme_lookup_icon()
abstract class GtkIconLookupFlags {
  static const int GTK_ICON_LOOKUP_NO_SVG = 1;
  static const int GTK_ICON_LOOKUP_FORCE_SVG = 2;
  static const int GTK_ICON_LOOKUP_USE_BUILTIN = 4;
  static const int GTK_ICON_LOOKUP_GENERIC_FALLBACK = 8;
  static const int GTK_ICON_LOOKUP_FORCE_SIZE = 16;
  static const int GTK_ICON_LOOKUP_FORCE_REGULAR = 32;
  static const int GTK_ICON_LOOKUP_FORCE_SYMBOLIC = 64;
  static const int GTK_ICON_LOOKUP_DIR_LTR = 128;
  static const int GTK_ICON_LOOKUP_DIR_RTL = 256;
}

typedef GIcon = _GIcon;

class _GIcon extends ffi.Opaque {}

typedef GCancellable = _GCancellable;

class _GCancellable extends ffi.Struct {
  external GObject parent_instance;

  external ffi.Pointer<GCancellablePrivate> priv;
}

typedef GCancellablePrivate = _GCancellablePrivate;

class _GCancellablePrivate extends ffi.Opaque {}

/// GAsyncReadyCallback:
/// @source_object: (nullable): the object the asynchronous operation was started with.
/// @res: a #GAsyncResult.
/// @user_data: user data passed to the callback.
///
/// Type definition for a function that will be called back when an asynchronous
/// operation within GIO has been completed. #GAsyncReadyCallback
/// callbacks from #GTask are guaranteed to be invoked in a later
/// iteration of the
/// [thread-default main context][g-main-context-push-thread-default]
/// where the #GTask was created. All other users of
/// #GAsyncReadyCallback must likewise call it asynchronously in a
/// later iteration of the main context.
///
/// The asynchronous operation is guaranteed to have held a reference to
/// @source_object from the time when the `*_async()` function was called, until
/// after this callback returns.
typedef GAsyncReadyCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<GObject>, ffi.Pointer<GAsyncResult>, gpointer)>>;
typedef GAsyncResult = _GAsyncResult;

class _GAsyncResult extends ffi.Opaque {}

typedef GdkRGBA = _GdkRGBA;

class _GdkRGBA extends ffi.Struct {
  @gdouble()
  external double red;

  @gdouble()
  external double green;

  @gdouble()
  external double blue;

  @gdouble()
  external double alpha;
}

typedef gdouble = ffi.Double;
typedef GdkRectangle = cairo_rectangle_int_t;

/// cairo_rectangle_int_t:
/// @x: X coordinate of the left side of the rectangle
/// @y: Y coordinate of the the top side of the rectangle
/// @width: width of the rectangle
/// @height: height of the rectangle
///
/// A data structure for holding a rectangle with integer coordinates.
///
/// Since: 1.10
typedef cairo_rectangle_int_t = _cairo_rectangle_int;

/// cairo_rectangle_int_t:
/// @x: X coordinate of the left side of the rectangle
/// @y: Y coordinate of the the top side of the rectangle
/// @width: width of the rectangle
/// @height: height of the rectangle
///
/// A data structure for holding a rectangle with integer coordinates.
///
/// Since: 1.10
class _cairo_rectangle_int extends ffi.Struct {
  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;

  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;
}

typedef GdkPoint = _GdkPoint;

/// GdkPoint:
/// @x: the x coordinate of the point.
/// @y: the y coordinate of the point.
///
/// Defines the x and y coordinates of a point.
class _GdkPoint extends ffi.Struct {
  @gint()
  external int x;

  @gint()
  external int y;
}

typedef GtkCellArea = _GtkCellArea;

class _GtkCellArea extends ffi.Struct {
  external GInitiallyUnowned parent_instance;

  external ffi.Pointer<GtkCellAreaPrivate> priv;
}

typedef GtkCellAreaPrivate = _GtkCellAreaPrivate;

class _GtkCellAreaPrivate extends ffi.Opaque {}

typedef GtkTreeModel = _GtkTreeModel;

class _GtkTreeModel extends ffi.Opaque {}

typedef GtkIconView = _GtkIconView;

class _GtkIconView extends ffi.Struct {
  external GtkContainer parent;

  external ffi.Pointer<GtkIconViewPrivate> priv;
}

typedef GtkContainer = _GtkContainer;

class _GtkContainer extends ffi.Struct {
  external GtkWidget widget;

  external ffi.Pointer<GtkContainerPrivate> priv;
}

typedef GtkContainerPrivate = _GtkContainerPrivate;

class _GtkContainerPrivate extends ffi.Opaque {}

typedef GtkIconViewPrivate = _GtkIconViewPrivate;

class _GtkIconViewPrivate extends ffi.Opaque {}

/// GtkOrientation:
/// @GTK_ORIENTATION_HORIZONTAL: The element is in horizontal orientation.
/// @GTK_ORIENTATION_VERTICAL: The element is in vertical orientation.
///
/// Represents the orientation of widgets and other objects which can be switched
/// between horizontal and vertical orientation on the fly, like #GtkToolbar or
/// #GtkGesturePan.
abstract class GtkOrientation {
  static const int GTK_ORIENTATION_HORIZONTAL = 0;
  static const int GTK_ORIENTATION_VERTICAL = 1;
}

typedef GtkTreePath = _GtkTreePath;

class _GtkTreePath extends ffi.Opaque {}

typedef GtkCellRenderer = _GtkCellRenderer;

class _GtkCellRenderer extends ffi.Struct {
  external GInitiallyUnowned parent_instance;

  external ffi.Pointer<GtkCellRendererPrivate> priv;
}

typedef GtkCellRendererPrivate = _GtkCellRendererPrivate;

class _GtkCellRendererPrivate extends ffi.Opaque {}

/// GtkIconViewForeachFunc:
/// @icon_view: a #GtkIconView
/// @path: The #GtkTreePath of a selected row
/// @data: (closure): user data
///
/// A function used by gtk_icon_view_selected_foreach() to map all
/// selected rows.  It will be called on every selected row in the view.
typedef GtkIconViewForeachFunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<GtkIconView>, ffi.Pointer<GtkTreePath>, gpointer)>>;

/// GtkSelectionMode:
/// @GTK_SELECTION_NONE: No selection is possible.
/// @GTK_SELECTION_SINGLE: Zero or one element may be selected.
/// @GTK_SELECTION_BROWSE: Exactly one element is selected.
/// In some circumstances, such as initially or during a search
/// operation, it’s possible for no element to be selected with
/// %GTK_SELECTION_BROWSE. What is really enforced is that the user
/// can’t deselect a currently selected element except by selecting
/// another element.
/// @GTK_SELECTION_MULTIPLE: Any number of elements may be selected.
/// The Ctrl key may be used to enlarge the selection, and Shift
/// key to select between the focus and the child pointed to.
/// Some widgets may also allow Click-drag to select a range of elements.
///
/// Used to control what selections users are allowed to make.
abstract class GtkSelectionMode {
  static const int GTK_SELECTION_NONE = 0;
  static const int GTK_SELECTION_SINGLE = 1;
  static const int GTK_SELECTION_BROWSE = 2;
  static const int GTK_SELECTION_MULTIPLE = 3;
}

typedef gfloat = ffi.Float;

/// GdkModifierType:
/// @GDK_SHIFT_MASK: the Shift key.
/// @GDK_LOCK_MASK: a Lock key (depending on the modifier mapping of the
/// X server this may either be CapsLock or ShiftLock).
/// @GDK_CONTROL_MASK: the Control key.
/// @GDK_MOD1_MASK: the fourth modifier key (it depends on the modifier
/// mapping of the X server which key is interpreted as this modifier, but
/// normally it is the Alt key).
/// @GDK_MOD2_MASK: the fifth modifier key (it depends on the modifier
/// mapping of the X server which key is interpreted as this modifier).
/// @GDK_MOD3_MASK: the sixth modifier key (it depends on the modifier
/// mapping of the X server which key is interpreted as this modifier).
/// @GDK_MOD4_MASK: the seventh modifier key (it depends on the modifier
/// mapping of the X server which key is interpreted as this modifier).
/// @GDK_MOD5_MASK: the eighth modifier key (it depends on the modifier
/// mapping of the X server which key is interpreted as this modifier).
/// @GDK_BUTTON1_MASK: the first mouse button.
/// @GDK_BUTTON2_MASK: the second mouse button.
/// @GDK_BUTTON3_MASK: the third mouse button.
/// @GDK_BUTTON4_MASK: the fourth mouse button.
/// @GDK_BUTTON5_MASK: the fifth mouse button.
/// @GDK_MODIFIER_RESERVED_13_MASK: A reserved bit flag; do not use in your own code
/// @GDK_MODIFIER_RESERVED_14_MASK: A reserved bit flag; do not use in your own code
/// @GDK_MODIFIER_RESERVED_15_MASK: A reserved bit flag; do not use in your own code
/// @GDK_MODIFIER_RESERVED_16_MASK: A reserved bit flag; do not use in your own code
/// @GDK_MODIFIER_RESERVED_17_MASK: A reserved bit flag; do not use in your own code
/// @GDK_MODIFIER_RESERVED_18_MASK: A reserved bit flag; do not use in your own code
/// @GDK_MODIFIER_RESERVED_19_MASK: A reserved bit flag; do not use in your own code
/// @GDK_MODIFIER_RESERVED_20_MASK: A reserved bit flag; do not use in your own code
/// @GDK_MODIFIER_RESERVED_21_MASK: A reserved bit flag; do not use in your own code
/// @GDK_MODIFIER_RESERVED_22_MASK: A reserved bit flag; do not use in your own code
/// @GDK_MODIFIER_RESERVED_23_MASK: A reserved bit flag; do not use in your own code
/// @GDK_MODIFIER_RESERVED_24_MASK: A reserved bit flag; do not use in your own code
/// @GDK_MODIFIER_RESERVED_25_MASK: A reserved bit flag; do not use in your own code
/// @GDK_SUPER_MASK: the Super modifier. Since 2.10
/// @GDK_HYPER_MASK: the Hyper modifier. Since 2.10
/// @GDK_META_MASK: the Meta modifier. Since 2.10
/// @GDK_MODIFIER_RESERVED_29_MASK: A reserved bit flag; do not use in your own code
/// @GDK_RELEASE_MASK: not used in GDK itself. GTK+ uses it to differentiate
/// between (keyval, modifiers) pairs from key press and release events.
/// @GDK_MODIFIER_MASK: a mask covering all modifier types.
///
/// A set of bit-flags to indicate the state of modifier keys and mouse buttons
/// in various event types. Typical modifier keys are Shift, Control, Meta,
/// Super, Hyper, Alt, Compose, Apple, CapsLock or ShiftLock.
///
/// Like the X Window System, GDK supports 8 modifier keys and 5 mouse buttons.
///
/// Since 2.10, GDK recognizes which of the Meta, Super or Hyper keys are mapped
/// to Mod2 - Mod5, and indicates this by setting %GDK_SUPER_MASK,
/// %GDK_HYPER_MASK or %GDK_META_MASK in the state field of key events.
///
/// Note that GDK may add internal values to events which include
/// reserved values such as %GDK_MODIFIER_RESERVED_13_MASK.  Your code
/// should preserve and ignore them.  You can use %GDK_MODIFIER_MASK to
/// remove all reserved values.
///
/// Also note that the GDK X backend interprets button press events for button
/// 4-7 as scroll events, so %GDK_BUTTON4_MASK and %GDK_BUTTON5_MASK will never
/// be set.
abstract class GdkModifierType {
  static const int GDK_SHIFT_MASK = 1;
  static const int GDK_LOCK_MASK = 2;
  static const int GDK_CONTROL_MASK = 4;
  static const int GDK_MOD1_MASK = 8;
  static const int GDK_MOD2_MASK = 16;
  static const int GDK_MOD3_MASK = 32;
  static const int GDK_MOD4_MASK = 64;
  static const int GDK_MOD5_MASK = 128;
  static const int GDK_BUTTON1_MASK = 256;
  static const int GDK_BUTTON2_MASK = 512;
  static const int GDK_BUTTON3_MASK = 1024;
  static const int GDK_BUTTON4_MASK = 2048;
  static const int GDK_BUTTON5_MASK = 4096;
  static const int GDK_MODIFIER_RESERVED_13_MASK = 8192;
  static const int GDK_MODIFIER_RESERVED_14_MASK = 16384;
  static const int GDK_MODIFIER_RESERVED_15_MASK = 32768;
  static const int GDK_MODIFIER_RESERVED_16_MASK = 65536;
  static const int GDK_MODIFIER_RESERVED_17_MASK = 131072;
  static const int GDK_MODIFIER_RESERVED_18_MASK = 262144;
  static const int GDK_MODIFIER_RESERVED_19_MASK = 524288;
  static const int GDK_MODIFIER_RESERVED_20_MASK = 1048576;
  static const int GDK_MODIFIER_RESERVED_21_MASK = 2097152;
  static const int GDK_MODIFIER_RESERVED_22_MASK = 4194304;
  static const int GDK_MODIFIER_RESERVED_23_MASK = 8388608;
  static const int GDK_MODIFIER_RESERVED_24_MASK = 16777216;
  static const int GDK_MODIFIER_RESERVED_25_MASK = 33554432;
  static const int GDK_SUPER_MASK = 67108864;
  static const int GDK_HYPER_MASK = 134217728;
  static const int GDK_META_MASK = 268435456;
  static const int GDK_MODIFIER_RESERVED_29_MASK = 536870912;
  static const int GDK_RELEASE_MASK = 1073741824;
  static const int GDK_MODIFIER_MASK = 1543512063;
}

typedef GtkTargetEntry = _GtkTargetEntry;

/// GtkTargetEntry:
/// @target: a string representation of the target type
/// @flags: #GtkTargetFlags for DND
/// @info: an application-assigned integer ID which will
/// get passed as a parameter to e.g the #GtkWidget::selection-get
/// signal. It allows the application to identify the target
/// type without extensive string compares.
///
/// A #GtkTargetEntry represents a single type of
/// data than can be supplied for by a widget for a selection
/// or for supplied or received during drag-and-drop.
class _GtkTargetEntry extends ffi.Struct {
  external ffi.Pointer<gchar> target;

  @guint()
  external int flags;

  @guint()
  external int info;
}

/// GdkDragAction:
/// @GDK_ACTION_DEFAULT: Means nothing, and should not be used.
/// @GDK_ACTION_COPY: Copy the data.
/// @GDK_ACTION_MOVE: Move the data, i.e. first copy it, then delete
/// it from the source using the DELETE target of the X selection protocol.
/// @GDK_ACTION_LINK: Add a link to the data. Note that this is only
/// useful if source and destination agree on what it means.
/// @GDK_ACTION_PRIVATE: Special action which tells the source that the
/// destination will do something that the source doesn’t understand.
/// @GDK_ACTION_ASK: Ask the user what to do with the data.
///
/// Used in #GdkDragContext to indicate what the destination
/// should do with the dropped data.
abstract class GdkDragAction {
  static const int GDK_ACTION_DEFAULT = 1;
  static const int GDK_ACTION_COPY = 2;
  static const int GDK_ACTION_MOVE = 4;
  static const int GDK_ACTION_LINK = 8;
  static const int GDK_ACTION_PRIVATE = 16;
  static const int GDK_ACTION_ASK = 32;
}

/// GtkIconViewDropPosition:
/// @GTK_ICON_VIEW_NO_DROP: no drop possible
/// @GTK_ICON_VIEW_DROP_INTO: dropped item replaces the item
/// @GTK_ICON_VIEW_DROP_LEFT: droppped item is inserted to the left
/// @GTK_ICON_VIEW_DROP_RIGHT: dropped item is inserted to the right
/// @GTK_ICON_VIEW_DROP_ABOVE: dropped item is inserted above
/// @GTK_ICON_VIEW_DROP_BELOW: dropped item is inserted below
///
/// An enum for determining where a dropped item goes.
abstract class GtkIconViewDropPosition {
  static const int GTK_ICON_VIEW_NO_DROP = 0;
  static const int GTK_ICON_VIEW_DROP_INTO = 1;
  static const int GTK_ICON_VIEW_DROP_LEFT = 2;
  static const int GTK_ICON_VIEW_DROP_RIGHT = 3;
  static const int GTK_ICON_VIEW_DROP_ABOVE = 4;
  static const int GTK_ICON_VIEW_DROP_BELOW = 5;
}

typedef GtkTooltip = _GtkTooltip;

class _GtkTooltip extends ffi.Opaque {}

typedef GtkTreeIter = _GtkTreeIter;

/// GtkTreeIter:
/// @stamp: a unique stamp to catch invalid iterators
/// @user_data: model-specific data
/// @user_data2: model-specific data
/// @user_data3: model-specific data
///
/// The #GtkTreeIter is the primary structure
/// for accessing a #GtkTreeModel. Models are expected to put a unique
/// integer in the @stamp member, and put
/// model-specific data in the three @user_data
/// members.
class _GtkTreeIter extends ffi.Struct {
  @gint()
  external int stamp;

  external gpointer user_data;

  external gpointer user_data2;

  external gpointer user_data3;
}

/// GtkRcFlags:
/// @GTK_RC_FG :Deprecated
/// @GTK_RC_BG: Deprecated
/// @GTK_RC_TEXT: Deprecated
/// @GTK_RC_BASE: Deprecated
///
/// Deprecated
abstract class GtkRcFlags {
  static const int GTK_RC_FG = 1;
  static const int GTK_RC_BG = 2;
  static const int GTK_RC_TEXT = 4;
  static const int GTK_RC_BASE = 8;
}
